
F103C8T6_with_help.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006674  08006674  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006674  08006674  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006674  08006674  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800667c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  2000001c  08006698  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08006698  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e092  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e8  00000000  00000000  0002e0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000306c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fd5  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010960  00000000  00000000  0004b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008facf  00000000  00000000  0005bb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb5fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca0  00000000  00000000  000eb64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800663c 	.word	0x0800663c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	0800663c 	.word	0x0800663c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_ADC1_Init+0x94>)
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_ADC1_Init+0x94>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_ADC1_Init+0x94>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_ADC1_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_ADC1_Init+0x94>)
 8000fec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_ADC1_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_ADC1_Init+0x94>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffe:	4815      	ldr	r0, [pc, #84]	; (8001054 <MX_ADC1_Init+0x94>)
 8001000:	f001 fe5e 	bl	8002cc0 <HAL_ADC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800100a:	f001 f83d 	bl	8002088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100e:	2301      	movs	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001012:	2301      	movs	r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001016:	2301      	movs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_ADC1_Init+0x94>)
 8001020:	f002 f86a 	bl	80030f8 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f001 f82d 	bl	8002088 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800102e:	2302      	movs	r3, #2
 8001030:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001032:	2302      	movs	r3, #2
 8001034:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_ADC1_Init+0x94>)
 800103c:	f002 f85c 	bl	80030f8 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001046:	f001 f81f 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000038 	.word	0x20000038
 8001058:	40012400 	.word	0x40012400

0800105c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_ADC_MspInit+0xc0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d14a      	bne.n	8001112 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010ac:	2306      	movs	r3, #6
 80010ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 80010bc:	f002 fdc2 	bl	8003c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010f8:	f002 fb06 	bl	8003708 <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001102:	f000 ffc1 	bl	8002088 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 800110a:	621a      	str	r2, [r3, #32]
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012400 	.word	0x40012400
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800
 8001128:	20000068 	.word	0x20000068
 800112c:	40020008 	.word	0x40020008

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DMA_Init+0x38>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MX_DMA_Init+0x38>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DMA_Init+0x38>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	200b      	movs	r0, #11
 8001154:	f002 faa1 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001158:	200b      	movs	r0, #11
 800115a:	f002 faba 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0xcc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_GPIO_Init+0xcc>)
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0xcc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <MX_GPIO_Init+0xcc>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <MX_GPIO_Init+0xcc>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_GPIO_Init+0xcc>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_GPIO_Init+0xcc>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_GPIO_Init+0xcc>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_GPIO_Init+0xcc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_1_1_Pin|IN_1_2_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2130      	movs	r1, #48	; 0x30
 80011cc:	481b      	ldr	r0, [pc, #108]	; (800123c <MX_GPIO_Init+0xd0>)
 80011ce:	f002 febd 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN_2_1_Pin|IN_2_2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2103      	movs	r1, #3
 80011d6:	481a      	ldr	r0, [pc, #104]	; (8001240 <MX_GPIO_Init+0xd4>)
 80011d8:	f002 feb8 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN_1_1_Pin|IN_1_2_Pin;
 80011dc:	2330      	movs	r3, #48	; 0x30
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xd0>)
 80011f4:	f002 fd26 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN_2_1_Pin|IN_2_2_Pin;
 80011f8:	2303      	movs	r3, #3
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_GPIO_Init+0xd4>)
 8001210:	f002 fd18 	bl	8003c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0xd4>)
 800122a:	f002 fd0b 	bl	8003c44 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	00000000 	.word	0x00000000

08001248 <pid>:
//	}
//
//}

volatile float tasking;
void pid(struct Motor *motor, float task, int choice) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
//		}
//		motor->counter_pid = 0;
//	}

//	motor->err_current = motor->out_speed - motor->current;
	motor->err_current = task - motor->current;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4619      	mov	r1, r3
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f7ff fb9a 	bl	8000994 <__aeabi_fsub>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
//		motor->err_current = 0;
//		motor->I_current = 0;
////		motor->I_current -= motor->err_current * motor->ki_current * 0.000333;
//	}

	motor->P_current = motor->err_current * motor->kp_current;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001270:	4619      	mov	r1, r3
 8001272:	4610      	mov	r0, r2
 8001274:	f7ff fc98 	bl	8000ba8 <__aeabi_fmul>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
	motor->I_current += motor->err_current * motor->ki_current * 0.000333;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8c7 	bl	8000418 <__aeabi_f2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7ff fc85 	bl	8000ba8 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8b9 	bl	8000418 <__aeabi_f2d>
 80012a6:	a38e      	add	r3, pc, #568	; (adr r3, 80014e0 <pid+0x298>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f90c 	bl	80004c8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7fe ff50 	bl	800015c <__adddf3>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fb12 	bl	80008ec <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (motor->I_current >= 1) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe18 	bl	8000f0c <__aeabi_fcmpge>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <pid+0xa2>
		motor->I_current = 1;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (motor->I_current <= -1) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	4980      	ldr	r1, [pc, #512]	; (80014f0 <pid+0x2a8>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe01 	bl	8000ef8 <__aeabi_fcmple>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <pid+0xba>
		motor->I_current = -1;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4a7c      	ldr	r2, [pc, #496]	; (80014f0 <pid+0x2a8>)
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	motor->out_current = motor->P_current + motor->I_current + motor->speed*0.003375;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f7ff fb43 	bl	8000998 <__addsf3>
 8001312:	4603      	mov	r3, r0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f87f 	bl	8000418 <__aeabi_f2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f878 	bl	8000418 <__aeabi_f2d>
 8001328:	a36f      	add	r3, pc, #444	; (adr r3, 80014e8 <pid+0x2a0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f8cb 	bl	80004c8 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7fe ff0f 	bl	800015c <__adddf3>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fad1 	bl	80008ec <__aeabi_d2f>
 800134a:	4602      	mov	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	631a      	str	r2, [r3, #48]	; 0x30

	if (choice == 1) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d127      	bne.n	80013a6 <pid+0x15e>
		if (motor->out_current >= 0) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fdd4 	bl	8000f0c <__aeabi_fcmpge>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <pid+0x136>
			HAL_GPIO_WritePin(GPIOA, IN_1_1_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	4861      	ldr	r0, [pc, #388]	; (80014f4 <pid+0x2ac>)
 8001370:	f002 fdec 	bl	8003f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_1_2_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2120      	movs	r1, #32
 8001378:	485e      	ldr	r0, [pc, #376]	; (80014f4 <pid+0x2ac>)
 800137a:	f002 fde7 	bl	8003f4c <HAL_GPIO_WritePin>

		}
		if (motor->out_current < 0) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fdac 	bl	8000ee4 <__aeabi_fcmplt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <pid+0x15e>
			HAL_GPIO_WritePin(GPIOA, IN_1_1_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2110      	movs	r1, #16
 8001396:	4857      	ldr	r0, [pc, #348]	; (80014f4 <pid+0x2ac>)
 8001398:	f002 fdd8 	bl	8003f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_1_2_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2120      	movs	r1, #32
 80013a0:	4854      	ldr	r0, [pc, #336]	; (80014f4 <pid+0x2ac>)
 80013a2:	f002 fdd3 	bl	8003f4c <HAL_GPIO_WritePin>
		}
	}

	if (choice == 2) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d127      	bne.n	80013fc <pid+0x1b4>
		if (motor->out_current >= 0) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fda9 	bl	8000f0c <__aeabi_fcmpge>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d009      	beq.n	80013d4 <pid+0x18c>
			HAL_GPIO_WritePin(GPIOB, IN_2_1_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2101      	movs	r1, #1
 80013c4:	484c      	ldr	r0, [pc, #304]	; (80014f8 <pid+0x2b0>)
 80013c6:	f002 fdc1 	bl	8003f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN_2_2_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2102      	movs	r1, #2
 80013ce:	484a      	ldr	r0, [pc, #296]	; (80014f8 <pid+0x2b0>)
 80013d0:	f002 fdbc 	bl	8003f4c <HAL_GPIO_WritePin>
		}
		if (motor->out_current < 0) {
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fd81 	bl	8000ee4 <__aeabi_fcmplt>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <pid+0x1b4>
			HAL_GPIO_WritePin(GPIOB, IN_2_1_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	4842      	ldr	r0, [pc, #264]	; (80014f8 <pid+0x2b0>)
 80013ee:	f002 fdad 	bl	8003f4c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN_2_2_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2102      	movs	r1, #2
 80013f6:	4840      	ldr	r0, [pc, #256]	; (80014f8 <pid+0x2b0>)
 80013f8:	f002 fda8 	bl	8003f4c <HAL_GPIO_WritePin>
		}
	}

	if (motor->out_current >= 1) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd81 	bl	8000f0c <__aeabi_fcmpge>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <pid+0x1d0>
		motor->out_current_limited = 1;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (motor->out_current <= -1) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4934      	ldr	r1, [pc, #208]	; (80014f0 <pid+0x2a8>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fd6a 	bl	8000ef8 <__aeabi_fcmple>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <pid+0x1e8>
		motor->out_current_limited = -1;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <pid+0x2a8>)
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (motor->out_current > -1 && motor->out_current < 1) {
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	492e      	ldr	r1, [pc, #184]	; (80014f0 <pid+0x2a8>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd72 	bl	8000f20 <__aeabi_fcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00d      	beq.n	800145e <pid+0x216>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd4a 	bl	8000ee4 <__aeabi_fcmplt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <pid+0x216>
		motor->out_current_limited = motor->out_current;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	motor->out_pwm = fabsf(motor->out_current_limited * 1000);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001462:	4926      	ldr	r1, [pc, #152]	; (80014fc <pid+0x2b4>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fb9f 	bl	8000ba8 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	639a      	str	r2, [r3, #56]	; 0x38
	if (motor->out_pwm < 2) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd31 	bl	8000ee4 <__aeabi_fcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <pid+0x248>
		motor->out_pwm = 1;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (motor->out_pwm > 990) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	491a      	ldr	r1, [pc, #104]	; (8001500 <pid+0x2b8>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd42 	bl	8000f20 <__aeabi_fcmpgt>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <pid+0x260>
		motor->out_pwm = 990;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4a16      	ldr	r2, [pc, #88]	; (8001500 <pid+0x2b8>)
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38
//			motor->out_pwm = motor->previous_pwm + pwm_step;
//		} else {
//			motor->out_pwm = motor->previous_pwm - pwm_step;
//		}
//	}
	if (choice == 1) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <pid+0x278>
		TIM3->CCR1 = motor->out_pwm;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	4c14      	ldr	r4, [pc, #80]	; (8001504 <pid+0x2bc>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fd63 	bl	8000f80 <__aeabi_f2uiz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6363      	str	r3, [r4, #52]	; 0x34
	} else if (choice == 2) {
		TIM3->CCR2 = motor->out_pwm;
	}
//	motor->previous_pwm = motor->out_pwm;
}
 80014be:	e00a      	b.n	80014d6 <pid+0x28e>
	} else if (choice == 2) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <pid+0x28e>
		TIM3->CCR2 = motor->out_pwm;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	4c0e      	ldr	r4, [pc, #56]	; (8001504 <pid+0x2bc>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd57 	bl	8000f80 <__aeabi_f2uiz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop
 80014e0:	1c0ca601 	.word	0x1c0ca601
 80014e4:	3f35d2d0 	.word	0x3f35d2d0
 80014e8:	53f7ced9 	.word	0x53f7ced9
 80014ec:	3f6ba5e3 	.word	0x3f6ba5e3
 80014f0:	bf800000 	.word	0xbf800000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	447a0000 	.word	0x447a0000
 8001500:	44778000 	.word	0x44778000
 8001504:	40000400 	.word	0x40000400

08001508 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800150c:	f001 fb76 	bl	8002bfc <HAL_Init>

	/* USER CODE BEGIN Init */
	motor_1.kp_angle = 0.412;
 8001510:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <main+0x1bc>)
 8001512:	4a6d      	ldr	r2, [pc, #436]	; (80016c8 <main+0x1c0>)
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_1.kp_speed = 0.000085;
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <main+0x1bc>)
 8001518:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <main+0x1c4>)
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
	motor_1.ki_speed = 0.000098;
 800151c:	4b69      	ldr	r3, [pc, #420]	; (80016c4 <main+0x1bc>)
 800151e:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <main+0x1c8>)
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
	motor_1.kp_current = 0.0001;
 8001522:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <main+0x1bc>)
 8001524:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <main+0x1cc>)
 8001526:	649a      	str	r2, [r3, #72]	; 0x48
	motor_1.ki_current = 19.0;
 8001528:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <main+0x1bc>)
 800152a:	4a6b      	ldr	r2, [pc, #428]	; (80016d8 <main+0x1d0>)
 800152c:	64da      	str	r2, [r3, #76]	; 0x4c

	motor_2.kp_angle = 0.4;
 800152e:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <main+0x1d4>)
 8001530:	4a6b      	ldr	r2, [pc, #428]	; (80016e0 <main+0x1d8>)
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_2.kp_speed = 0.000071;
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <main+0x1d4>)
 8001536:	4a6b      	ldr	r2, [pc, #428]	; (80016e4 <main+0x1dc>)
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
	motor_2.ki_speed = 0.000098;
 800153a:	4b68      	ldr	r3, [pc, #416]	; (80016dc <main+0x1d4>)
 800153c:	4a64      	ldr	r2, [pc, #400]	; (80016d0 <main+0x1c8>)
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
	motor_2.kp_current = 0.0001;
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <main+0x1d4>)
 8001542:	4a64      	ldr	r2, [pc, #400]	; (80016d4 <main+0x1cc>)
 8001544:	649a      	str	r2, [r3, #72]	; 0x48
	motor_2.ki_current = 19.0;
 8001546:	4b65      	ldr	r3, [pc, #404]	; (80016dc <main+0x1d4>)
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <main+0x1d0>)
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800154c:	f000 f8f0 	bl	8001730 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001550:	f7ff fe0c 	bl	800116c <MX_GPIO_Init>
	MX_DMA_Init();
 8001554:	f7ff fdec 	bl	8001130 <MX_DMA_Init>
	MX_ADC1_Init();
 8001558:	f7ff fd32 	bl	8000fc0 <MX_ADC1_Init>
	MX_TIM1_Init();
 800155c:	f001 f8a4 	bl	80026a8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001560:	f001 f8fa 	bl	8002758 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001564:	f001 f94c 	bl	8002800 <MX_TIM3_Init>
	MX_SPI2_Init();
 8001568:	f000 fd94 	bl	8002094 <MX_SPI2_Init>
	MX_TIM4_Init();
 800156c:	f001 f9ac 	bl	80028c8 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcValBuf, 2);
 8001570:	2202      	movs	r2, #2
 8001572:	495d      	ldr	r1, [pc, #372]	; (80016e8 <main+0x1e0>)
 8001574:	485d      	ldr	r0, [pc, #372]	; (80016ec <main+0x1e4>)
 8001576:	f001 fc7b 	bl	8002e70 <HAL_ADC_Start_DMA>

	if (_ENABLE_MOTOR_1) {
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800157a:	2100      	movs	r1, #0
 800157c:	485c      	ldr	r0, [pc, #368]	; (80016f0 <main+0x1e8>)
 800157e:	f003 ff9f 	bl	80054c0 <HAL_TIM_PWM_Start_IT>

		__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <main+0x1ec>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0201 	mvn.w	r2, #1
 800158a:	611a      	str	r2, [r3, #16]
		HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800158c:	213c      	movs	r1, #60	; 0x3c
 800158e:	4859      	ldr	r0, [pc, #356]	; (80016f4 <main+0x1ec>)
 8001590:	f004 f9ae 	bl	80058f0 <HAL_TIM_Encoder_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8001594:	4857      	ldr	r0, [pc, #348]	; (80016f4 <main+0x1ec>)
 8001596:	f003 fec3 	bl	8005320 <HAL_TIM_Base_Start_IT>

		HAL_GPIO_WritePin(GPIOA, IN_1_1_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2110      	movs	r1, #16
 800159e:	4856      	ldr	r0, [pc, #344]	; (80016f8 <main+0x1f0>)
 80015a0:	f002 fcd4 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_1_2_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2120      	movs	r1, #32
 80015a8:	4853      	ldr	r0, [pc, #332]	; (80016f8 <main+0x1f0>)
 80015aa:	f002 fccf 	bl	8003f4c <HAL_GPIO_WritePin>

//		HAL_GPIO_WritePin(GPIOA, IN_1_1_Pin, GPIO_PIN_RESET); ПОЛОЖИТЕЛЬНОЕ
		TIM3->CCR1 = 1;
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <main+0x1f4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if (_ENABLE_MOTOR_2) {
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80015b4:	2104      	movs	r1, #4
 80015b6:	484e      	ldr	r0, [pc, #312]	; (80016f0 <main+0x1e8>)
 80015b8:	f003 ff82 	bl	80054c0 <HAL_TIM_PWM_Start_IT>

		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <main+0x1f8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0201 	mvn.w	r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015c6:	213c      	movs	r1, #60	; 0x3c
 80015c8:	484d      	ldr	r0, [pc, #308]	; (8001700 <main+0x1f8>)
 80015ca:	f004 f903 	bl	80057d4 <HAL_TIM_Encoder_Start>
		HAL_TIM_Base_Start_IT(&htim2);
 80015ce:	484c      	ldr	r0, [pc, #304]	; (8001700 <main+0x1f8>)
 80015d0:	f003 fea6 	bl	8005320 <HAL_TIM_Base_Start_IT>

		HAL_GPIO_WritePin(GPIOB, IN_2_1_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	484a      	ldr	r0, [pc, #296]	; (8001704 <main+0x1fc>)
 80015da:	f002 fcb7 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN_2_2_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2102      	movs	r1, #2
 80015e2:	4848      	ldr	r0, [pc, #288]	; (8001704 <main+0x1fc>)
 80015e4:	f002 fcb2 	bl	8003f4c <HAL_GPIO_WritePin>

//		HAL_GPIO_WritePin(GPIOB, IN_2_1_Pin, GPIO_PIN_SET); ПОЛОЖИТЕЛЬНОЕ
		TIM3->CCR2 = 1;
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <main+0x1f4>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (TIM3->CCR1 == 0) {
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <main+0x1f4>)
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <main+0xf4>
			TIM3->CCR1 = 1;
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <main+0x1f4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (TIM3->CCR2 == 0) {
 80015fc:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <main+0x1f4>)
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <main+0x102>
			TIM3->CCR2 = 1;
 8001604:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <main+0x1f4>)
 8001606:	2201      	movs	r2, #1
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (adcFlag == 1) {
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <main+0x200>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d11a      	bne.n	800164a <main+0x142>
			adcFlag = 0;
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <main+0x200>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 800161a:	4834      	ldr	r0, [pc, #208]	; (80016ec <main+0x1e4>)
 800161c:	f001 fd06 	bl	800302c <HAL_ADC_Stop_DMA>
			adcValueCh1 = adcValBuf[0];
 8001620:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <main+0x1e0>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <main+0x204>)
 8001628:	801a      	strh	r2, [r3, #0]
			adcValueCh2 = adcValBuf[1];
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <main+0x1e0>)
 800162c:	885b      	ldrh	r3, [r3, #2]
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <main+0x208>)
 8001632:	801a      	strh	r2, [r3, #0]
			adcValBuf[0] = 0;
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <main+0x1e0>)
 8001636:	2200      	movs	r2, #0
 8001638:	801a      	strh	r2, [r3, #0]
			adcValBuf[1] = 0;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <main+0x1e0>)
 800163c:	2200      	movs	r2, #0
 800163e:	805a      	strh	r2, [r3, #2]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcValBuf, 2);
 8001640:	2202      	movs	r2, #2
 8001642:	4929      	ldr	r1, [pc, #164]	; (80016e8 <main+0x1e0>)
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <main+0x1e4>)
 8001646:	f001 fc13 	bl	8002e70 <HAL_ADC_Start_DMA>
		}

		if (_ENABLE_MOTOR_1) {
			cs1ADCValFilter = Median_ADC_CS1(adcValueCh1);
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <main+0x204>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f95d 	bl	8001910 <Median_ADC_CS1>
 8001656:	4603      	mov	r3, r0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fa51 	bl	8000b00 <__aeabi_i2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <main+0x20c>)
 8001662:	6013      	str	r3, [r2, #0]

		}
		if (_ENABLE_MOTOR_2) {
			cs2ADCValFilter = Median_ADC_CS2(adcValueCh2);
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <main+0x208>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fa00 	bl	8001a70 <Median_ADC_CS2>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fa44 	bl	8000b00 <__aeabi_i2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a27      	ldr	r2, [pc, #156]	; (8001718 <main+0x210>)
 800167c:	6013      	str	r3, [r2, #0]
		}

		currentSearch(cs1ADCValFilter, cs2ADCValFilter);
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <main+0x20c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a25      	ldr	r2, [pc, #148]	; (8001718 <main+0x210>)
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f8ad 	bl	80017e8 <currentSearch>

		if (_ENABLE_MOTOR_1) {
			enc1Value = TIM1->CNT;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <main+0x214>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <main+0x218>)
 8001696:	801a      	strh	r2, [r3, #0]
		}
		if (_ENABLE_MOTOR_2) {
			enc2Value = TIM2->CNT;
 8001698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <main+0x21c>)
 80016a2:	801a      	strh	r2, [r3, #0]
		}

		if (pid_flag == 1) {
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <main+0x220>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d1a0      	bne.n	80015ee <main+0xe6>
//			pid(&motor_1, tasking, 1);
			pid(&motor_2, tasking, 2);
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <main+0x224>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	4619      	mov	r1, r3
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <main+0x1d4>)
 80016b6:	f7ff fdc7 	bl	8001248 <pid>
			pid_flag = 0;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <main+0x220>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
		if (TIM3->CCR1 == 0) {
 80016c0:	e795      	b.n	80015ee <main+0xe6>
 80016c2:	bf00      	nop
 80016c4:	200000ac 	.word	0x200000ac
 80016c8:	3ed2f1aa 	.word	0x3ed2f1aa
 80016cc:	38b24207 	.word	0x38b24207
 80016d0:	38cd8559 	.word	0x38cd8559
 80016d4:	38d1b717 	.word	0x38d1b717
 80016d8:	41980000 	.word	0x41980000
 80016dc:	20000118 	.word	0x20000118
 80016e0:	3ecccccd 	.word	0x3ecccccd
 80016e4:	3894e5d6 	.word	0x3894e5d6
 80016e8:	20000184 	.word	0x20000184
 80016ec:	20000038 	.word	0x20000038
 80016f0:	20000518 	.word	0x20000518
 80016f4:	20000488 	.word	0x20000488
 80016f8:	40010800 	.word	0x40010800
 80016fc:	40000400 	.word	0x40000400
 8001700:	200004d0 	.word	0x200004d0
 8001704:	40010c00 	.word	0x40010c00
 8001708:	20000188 	.word	0x20000188
 800170c:	2000018a 	.word	0x2000018a
 8001710:	2000018c 	.word	0x2000018c
 8001714:	20000190 	.word	0x20000190
 8001718:	20000194 	.word	0x20000194
 800171c:	40012c00 	.word	0x40012c00
 8001720:	20000198 	.word	0x20000198
 8001724:	2000019a 	.word	0x2000019a
 8001728:	2000019c 	.word	0x2000019c
 800172c:	200001b8 	.word	0x200001b8

08001730 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	2228      	movs	r2, #40	; 0x28
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f004 ff74 	bl	800662c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176e:	2301      	movs	r3, #1
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800177c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fbf8 	bl	8003f7c <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x66>
		Error_Handler();
 8001792:	f000 fc79 	bl	8002088 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fe64 	bl	8004480 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x92>
		Error_Handler();
 80017be:	f000 fc63 	bl	8002088 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017c2:	2302      	movs	r3, #2
 80017c4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ca:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 ffbc 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xae>
		Error_Handler();
 80017da:	f000 fc55 	bl	8002088 <Error_Handler>
	}
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <currentSearch>:

/* USER CODE BEGIN 4 */

void currentSearch(float cs1ADCValFilter, float cs2ADCValFilter) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	cs1Voltage = cs1ADCValFilter * _CS1_PRESCAL;
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fe10 	bl	8000418 <__aeabi_f2d>
 80017f8:	a339      	add	r3, pc, #228	; (adr r3, 80018e0 <currentSearch+0xf8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fe63 	bl	80004c8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f86f 	bl	80008ec <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	4a39      	ldr	r2, [pc, #228]	; (80018f8 <currentSearch+0x110>)
 8001812:	6013      	str	r3, [r2, #0]
	cs2Voltage = cs2ADCValFilter * _CS2_PRESCAL;
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f7fe fdff 	bl	8000418 <__aeabi_f2d>
 800181a:	a331      	add	r3, pc, #196	; (adr r3, 80018e0 <currentSearch+0xf8>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fe52 	bl	80004c8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f85e 	bl	80008ec <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <currentSearch+0x114>)
 8001834:	6013      	str	r3, [r2, #0]

	cs1Current = (cs1Voltage - _CS1_VOLTAGE_MID_POINT) / _CS1_SENS;
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <currentSearch+0x110>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fdec 	bl	8000418 <__aeabi_f2d>
 8001840:	a329      	add	r3, pc, #164	; (adr r3, 80018e8 <currentSearch+0x100>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fc87 	bl	8000158 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	a327      	add	r3, pc, #156	; (adr r3, 80018f0 <currentSearch+0x108>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe ff60 	bl	800071c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f842 	bl	80008ec <__aeabi_d2f>
 8001868:	4603      	mov	r3, r0
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <currentSearch+0x118>)
 800186c:	6013      	str	r3, [r2, #0]

	cs2Current = (cs2Voltage - _CS2_VOLTAGE_MID_POINT) / _CS2_SENS;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <currentSearch+0x114>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fdd0 	bl	8000418 <__aeabi_f2d>
 8001878:	a31b      	add	r3, pc, #108	; (adr r3, 80018e8 <currentSearch+0x100>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fc6b 	bl	8000158 <__aeabi_dsub>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	a319      	add	r3, pc, #100	; (adr r3, 80018f0 <currentSearch+0x108>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe ff44 	bl	800071c <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f826 	bl	80008ec <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <currentSearch+0x11c>)
 80018a4:	6013      	str	r3, [r2, #0]

	motor_1.current = simpleKalman1(Median_Cur_CS1(cs1Current));
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <currentSearch+0x118>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f990 	bl	8001bd0 <Median_Cur_CS1>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fae0 	bl	8001e78 <simpleKalman1>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <currentSearch+0x120>)
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58

	motor_2.current = simpleKalman2(Median_Cur_CS2(cs2Current));
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <currentSearch+0x11c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fa2e 	bl	8001d24 <Median_Cur_CS2>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fb58 	bl	8001f80 <simpleKalman2>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <currentSearch+0x124>)
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	66666666 	.word	0x66666666
 80018e4:	3f4a6666 	.word	0x3f4a6666
 80018e8:	53f7ced9 	.word	0x53f7ced9
 80018ec:	3ff9a5e3 	.word	0x3ff9a5e3
 80018f0:	28f5c28f 	.word	0x28f5c28f
 80018f4:	3fe28f5c 	.word	0x3fe28f5c
 80018f8:	200001bc 	.word	0x200001bc
 80018fc:	200001c0 	.word	0x200001c0
 8001900:	200001c4 	.word	0x200001c4
 8001904:	200001c8 	.word	0x200001c8
 8001908:	200000ac 	.word	0x200000ac
 800190c:	20000118 	.word	0x20000118

08001910 <Median_ADC_CS1>:

int Median_ADC_CS1(int newVal) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];  // ����������� �����
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <Median_ADC_CS1+0x158>)
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f8ef 	bl	8000b00 <__aeabi_i2f>
 8001922:	4603      	mov	r3, r0
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001926:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <Median_ADC_CS1+0x158>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b1c      	cmp	r3, #28
 8001930:	d840      	bhi.n	80019b4 <Median_ADC_CS1+0xa4>
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <Median_ADC_CS1+0x158>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	494a      	ldr	r1, [pc, #296]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f7ff fae8 	bl	8000f20 <__aeabi_fcmpgt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02e      	beq.n	80019b4 <Median_ADC_CS1+0xa4>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e026      	b.n	80019ac <Median_ADC_CS1+0x9c>
			if (buffer[i] > buffer[i + 1]) {
 800195e:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	4940      	ldr	r1, [pc, #256]	; (8001a6c <Median_ADC_CS1+0x15c>)
 800196c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f7ff fad4 	bl	8000f20 <__aeabi_fcmpgt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d013      	beq.n	80019a6 <Median_ADC_CS1+0x96>
				float buff = buffer[i];
 800197e:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <Median_ADC_CS1+0x15c>)
 800198e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001992:	4936      	ldr	r1, [pc, #216]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <Median_ADC_CS1+0x15c>)
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b1c      	cmp	r3, #28
 80019b0:	ddd5      	ble.n	800195e <Median_ADC_CS1+0x4e>
 80019b2:	e043      	b.n	8001a3c <Median_ADC_CS1+0x12c>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <Median_ADC_CS1+0x158>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03f      	beq.n	8001a3c <Median_ADC_CS1+0x12c>
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <Median_ADC_CS1+0x158>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <Median_ADC_CS1+0x15c>)
 80019c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <Median_ADC_CS1+0x158>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4927      	ldr	r1, [pc, #156]	; (8001a6c <Median_ADC_CS1+0x15c>)
 80019ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff faa3 	bl	8000f20 <__aeabi_fcmpgt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d02d      	beq.n	8001a3c <Median_ADC_CS1+0x12c>
			for (int i = count; i > 0; i--) {
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <Median_ADC_CS1+0x158>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e026      	b.n	8001a36 <Median_ADC_CS1+0x126>
				if (buffer[i] < buffer[i - 1]) {
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <Median_ADC_CS1+0x15c>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	491d      	ldr	r1, [pc, #116]	; (8001a6c <Median_ADC_CS1+0x15c>)
 80019f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7ff fa71 	bl	8000ee4 <__aeabi_fcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <Median_ADC_CS1+0x120>
					float buff = buffer[i];
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a1c:	4913      	ldr	r1, [pc, #76]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	4910      	ldr	r1, [pc, #64]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dcd5      	bgt.n	80019e8 <Median_ADC_CS1+0xd8>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b1d      	cmp	r3, #29
 8001a4c:	d902      	bls.n	8001a54 <Median_ADC_CS1+0x144>
		count = 0;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <Median_ADC_CS1+0x158>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <Median_ADC_CS1+0x15c>)
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa6b 	bl	8000f34 <__aeabi_f2iz>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	200001fc 	.word	0x200001fc
 8001a6c:	20000200 	.word	0x20000200

08001a70 <Median_ADC_CS2>:

int Median_ADC_CS2(int newVal) {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];  // ����������� �����
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff f83f 	bl	8000b00 <__aeabi_i2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001a86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b1c      	cmp	r3, #28
 8001a90:	d840      	bhi.n	8001b14 <Median_ADC_CS2+0xa4>
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	494a      	ldr	r1, [pc, #296]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f7ff fa38 	bl	8000f20 <__aeabi_fcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02e      	beq.n	8001b14 <Median_ADC_CS2+0xa4>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001ab6:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e026      	b.n	8001b0c <Median_ADC_CS2+0x9c>
			if (buffer[i] > buffer[i + 1]) {
 8001abe:	4a43      	ldr	r2, [pc, #268]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4940      	ldr	r1, [pc, #256]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fa24 	bl	8000f20 <__aeabi_fcmpgt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d013      	beq.n	8001b06 <Median_ADC_CS2+0x96>
				float buff = buffer[i];
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a37      	ldr	r2, [pc, #220]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001aee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af2:	4936      	ldr	r1, [pc, #216]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4933      	ldr	r1, [pc, #204]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b1c      	cmp	r3, #28
 8001b10:	ddd5      	ble.n	8001abe <Median_ADC_CS2+0x4e>
 8001b12:	e043      	b.n	8001b9c <Median_ADC_CS2+0x12c>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03f      	beq.n	8001b9c <Median_ADC_CS2+0x12c>
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	4a2a      	ldr	r2, [pc, #168]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4927      	ldr	r1, [pc, #156]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7ff f9f3 	bl	8000f20 <__aeabi_fcmpgt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02d      	beq.n	8001b9c <Median_ADC_CS2+0x12c>
			for (int i = count; i > 0; i--) {
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e026      	b.n	8001b96 <Median_ADC_CS2+0x126>
				if (buffer[i] < buffer[i - 1]) {
 8001b48:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	491d      	ldr	r1, [pc, #116]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff f9c1 	bl	8000ee4 <__aeabi_fcmplt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <Median_ADC_CS2+0x120>
					float buff = buffer[i];
 8001b68:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b7c:	4913      	ldr	r1, [pc, #76]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	4910      	ldr	r1, [pc, #64]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dcd5      	bgt.n	8001b48 <Median_ADC_CS2+0xd8>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b1d      	cmp	r3, #29
 8001bac:	d902      	bls.n	8001bb4 <Median_ADC_CS2+0x144>
		count = 0;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <Median_ADC_CS2+0x158>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <Median_ADC_CS2+0x15c>)
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f9bb 	bl	8000f34 <__aeabi_f2iz>
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	20000278 	.word	0x20000278
 8001bcc:	2000027c 	.word	0x2000027c

08001bd0 <Median_Cur_CS1>:

float Median_Cur_CS1(float newVal) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];  // ����������� �����
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001bd8:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4950      	ldr	r1, [pc, #320]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b1c      	cmp	r3, #28
 8001bea:	d840      	bhi.n	8001c6e <Median_Cur_CS1+0x9e>
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001bf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4948      	ldr	r1, [pc, #288]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001bfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff f98b 	bl	8000f20 <__aeabi_fcmpgt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02e      	beq.n	8001c6e <Median_Cur_CS1+0x9e>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e026      	b.n	8001c66 <Median_Cur_CS1+0x96>
			if (buffer[i] > buffer[i + 1]) {
 8001c18:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	493e      	ldr	r1, [pc, #248]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7ff f977 	bl	8000f20 <__aeabi_fcmpgt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <Median_Cur_CS1+0x90>
				float buff = buffer[i];
 8001c38:	4a39      	ldr	r2, [pc, #228]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c4c:	4934      	ldr	r1, [pc, #208]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4931      	ldr	r1, [pc, #196]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b1c      	cmp	r3, #28
 8001c6a:	ddd5      	ble.n	8001c18 <Median_Cur_CS1+0x48>
 8001c6c:	e043      	b.n	8001cf6 <Median_Cur_CS1+0x126>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03f      	beq.n	8001cf6 <Median_Cur_CS1+0x126>
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4926      	ldr	r1, [pc, #152]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f7ff f946 	bl	8000f20 <__aeabi_fcmpgt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02d      	beq.n	8001cf6 <Median_Cur_CS1+0x126>
			for (int i = count; i > 0; i--) {
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e026      	b.n	8001cf0 <Median_Cur_CS1+0x120>
				if (buffer[i] < buffer[i - 1]) {
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	491c      	ldr	r1, [pc, #112]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001cb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7ff f914 	bl	8000ee4 <__aeabi_fcmplt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d013      	beq.n	8001cea <Median_Cur_CS1+0x11a>
					float buff = buffer[i];
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001cd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd6:	4912      	ldr	r1, [pc, #72]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	490f      	ldr	r1, [pc, #60]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dcd5      	bgt.n	8001ca2 <Median_Cur_CS1+0xd2>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b1d      	cmp	r3, #29
 8001d06:	d902      	bls.n	8001d0e <Median_Cur_CS1+0x13e>
		count = 0;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <Median_Cur_CS1+0x14c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <Median_Cur_CS1+0x150>)
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002f4 	.word	0x200002f4
 8001d20:	200002f8 	.word	0x200002f8

08001d24 <Median_Cur_CS2>:

float Median_Cur_CS2(float newVal) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	static float buffer[NUM_READ];  // ����������� �����
	static uint32_t count = 0;
	buffer[count] = newVal;
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4950      	ldr	r1, [pc, #320]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if ((count < NUM_READ - 1) && (buffer[count] > buffer[count + 1])) {
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b1c      	cmp	r3, #28
 8001d3e:	d840      	bhi.n	8001dc2 <Median_Cur_CS2+0x9e>
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	4948      	ldr	r1, [pc, #288]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f7ff f8e1 	bl	8000f20 <__aeabi_fcmpgt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02e      	beq.n	8001dc2 <Median_Cur_CS2+0x9e>
		for (int i = count; i < NUM_READ - 1; i++) {
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e026      	b.n	8001dba <Median_Cur_CS2+0x96>
			if (buffer[i] > buffer[i + 1]) {
 8001d6c:	4a41      	ldr	r2, [pc, #260]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	493e      	ldr	r1, [pc, #248]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7ff f8cd 	bl	8000f20 <__aeabi_fcmpgt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <Median_Cur_CS2+0x90>
				float buff = buffer[i];
 8001d8c:	4a39      	ldr	r2, [pc, #228]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	60fb      	str	r3, [r7, #12]
				buffer[i] = buffer[i + 1];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a36      	ldr	r2, [pc, #216]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001d9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001da0:	4934      	ldr	r1, [pc, #208]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buffer[i + 1] = buff;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4931      	ldr	r1, [pc, #196]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = count; i < NUM_READ - 1; i++) {
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b1c      	cmp	r3, #28
 8001dbe:	ddd5      	ble.n	8001d6c <Median_Cur_CS2+0x48>
 8001dc0:	e043      	b.n	8001e4a <Median_Cur_CS2+0x126>
			}
		}
	} else {
		if ((count > 0) && (buffer[count - 1] > buffer[count])) {
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03f      	beq.n	8001e4a <Median_Cur_CS2+0x126>
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001dd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4926      	ldr	r1, [pc, #152]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7ff f89c 	bl	8000f20 <__aeabi_fcmpgt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02d      	beq.n	8001e4a <Median_Cur_CS2+0x126>
			for (int i = count; i > 0; i--) {
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e026      	b.n	8001e44 <Median_Cur_CS2+0x120>
				if (buffer[i] < buffer[i - 1]) {
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	491c      	ldr	r1, [pc, #112]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7ff f86a 	bl	8000ee4 <__aeabi_fcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d013      	beq.n	8001e3e <Median_Cur_CS2+0x11a>
					float buff = buffer[i];
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	60bb      	str	r3, [r7, #8]
					buffer[i] = buffer[i - 1];
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e2a:	4912      	ldr	r1, [pc, #72]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					buffer[i - 1] = buff;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	490f      	ldr	r1, [pc, #60]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = count; i > 0; i--) {
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dcd5      	bgt.n	8001df6 <Median_Cur_CS2+0xd2>
				}
			}
		}
	}
	if (++count >= NUM_READ)
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b1d      	cmp	r3, #29
 8001e5a:	d902      	bls.n	8001e62 <Median_Cur_CS2+0x13e>
		count = 0;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <Median_Cur_CS2+0x14c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	return buffer[(int) NUM_READ / 2];
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <Median_Cur_CS2+0x150>)
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000370 	.word	0x20000370
 8001e74:	20000374 	.word	0x20000374

08001e78 <simpleKalman1>:

float _err_measure = 0.4;
float _q = 0.05;
float simpleKalman1(float newVal) {
 8001e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	float _kalman_gain, _current_estimate;
	static float _err_estimate = 0.04;
	static float _last_estimate;
	_kalman_gain = (float) _err_estimate / (_err_estimate + _err_measure);
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <simpleKalman1+0xf4>)
 8001e84:	681c      	ldr	r4, [r3, #0]
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <simpleKalman1+0xf4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <simpleKalman1+0xf8>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fd81 	bl	8000998 <__addsf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7fe ff38 	bl	8000d10 <__aeabi_fdiv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
	_current_estimate = _last_estimate
			+ (float) _kalman_gain * (newVal - _last_estimate);
 8001ea4:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <simpleKalman1+0xfc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fd72 	bl	8000994 <__aeabi_fsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fe77 	bl	8000ba8 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <simpleKalman1+0xfc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
	_current_estimate = _last_estimate
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f7fe fd67 	bl	8000998 <__addsf3>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60bb      	str	r3, [r7, #8]
	_err_estimate = (1.0 - _kalman_gain) * _err_estimate
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe faa2 	bl	8000418 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	f04f 0000 	mov.w	r0, #0
 8001edc:	4926      	ldr	r1, [pc, #152]	; (8001f78 <simpleKalman1+0x100>)
 8001ede:	f7fe f93b 	bl	8000158 <__aeabi_dsub>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4614      	mov	r4, r2
 8001ee8:	461d      	mov	r5, r3
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <simpleKalman1+0xf4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fa92 	bl	8000418 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe fae4 	bl	80004c8 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4690      	mov	r8, r2
 8001f06:	4699      	mov	r9, r3
			+ fabs(_last_estimate - _current_estimate) * _q;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <simpleKalman1+0xfc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fd40 	bl	8000994 <__aeabi_fsub>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fa7c 	bl	8000418 <__aeabi_f2d>
 8001f20:	4604      	mov	r4, r0
 8001f22:	460d      	mov	r5, r1
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <simpleKalman1+0x104>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fa75 	bl	8000418 <__aeabi_f2d>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fac7 	bl	80004c8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f7fe f90b 	bl	800015c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fccd 	bl	80008ec <__aeabi_d2f>
 8001f52:	4603      	mov	r3, r0
	_err_estimate = (1.0 - _kalman_gain) * _err_estimate
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <simpleKalman1+0xf4>)
 8001f56:	6013      	str	r3, [r2, #0]
	_last_estimate = _current_estimate;
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <simpleKalman1+0xfc>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6013      	str	r3, [r2, #0]
	return _current_estimate;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000000 	.word	0x20000000
 8001f74:	200003ec 	.word	0x200003ec
 8001f78:	3ff00000 	.word	0x3ff00000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <simpleKalman2>:

float simpleKalman2(float newVal) {
 8001f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	float _kalman_gain, _current_estimate;
	static float _err_estimate = 0.04;
	static float _last_estimate;
	_kalman_gain = (float) _err_estimate / (_err_estimate + _err_measure);
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <simpleKalman2+0xf4>)
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <simpleKalman2+0xf4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a39      	ldr	r2, [pc, #228]	; (8002078 <simpleKalman2+0xf8>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fcfd 	bl	8000998 <__addsf3>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe feb4 	bl	8000d10 <__aeabi_fdiv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
	_current_estimate = _last_estimate
			+ (float) _kalman_gain * (newVal - _last_estimate);
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <simpleKalman2+0xfc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fcee 	bl	8000994 <__aeabi_fsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fdf3 	bl	8000ba8 <__aeabi_fmul>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <simpleKalman2+0xfc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
	_current_estimate = _last_estimate
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f7fe fce3 	bl	8000998 <__addsf3>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	60bb      	str	r3, [r7, #8]
	_err_estimate = (1.0 - _kalman_gain) * _err_estimate
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7fe fa1e 	bl	8000418 <__aeabi_f2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	4926      	ldr	r1, [pc, #152]	; (8002080 <simpleKalman2+0x100>)
 8001fe6:	f7fe f8b7 	bl	8000158 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <simpleKalman2+0xf4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa0e 	bl	8000418 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe fa60 	bl	80004c8 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4690      	mov	r8, r2
 800200e:	4699      	mov	r9, r3
			+ fabs(_last_estimate - _current_estimate) * _q;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <simpleKalman2+0xfc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fcbc 	bl	8000994 <__aeabi_fsub>
 800201c:	4603      	mov	r3, r0
 800201e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f9f8 	bl	8000418 <__aeabi_f2d>
 8002028:	4604      	mov	r4, r0
 800202a:	460d      	mov	r5, r1
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <simpleKalman2+0x104>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f9f1 	bl	8000418 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe fa43 	bl	80004c8 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4640      	mov	r0, r8
 8002048:	4649      	mov	r1, r9
 800204a:	f7fe f887 	bl	800015c <__adddf3>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fc49 	bl	80008ec <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
	_err_estimate = (1.0 - _kalman_gain) * _err_estimate
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <simpleKalman2+0xf4>)
 800205e:	6013      	str	r3, [r2, #0]
	_last_estimate = _current_estimate;
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <simpleKalman2+0xfc>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6013      	str	r3, [r2, #0]
	return _current_estimate;
 8002066:	68bb      	ldr	r3, [r7, #8]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002072:	bf00      	nop
 8002074:	2000000c 	.word	0x2000000c
 8002078:	20000000 	.word	0x20000000
 800207c:	200003f0 	.word	0x200003f0
 8002080:	3ff00000 	.word	0x3ff00000
 8002084:	20000004 	.word	0x20000004

08002088 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800208c:	b672      	cpsid	i
}
 800208e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002090:	e7fe      	b.n	8002090 <Error_Handler+0x8>
	...

08002094 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <MX_SPI2_Init+0x60>)
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <MX_SPI2_Init+0x64>)
 800209c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020da:	220a      	movs	r2, #10
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_SPI2_Init+0x60>)
 80020e0:	f002 fbea 	bl	80048b8 <HAL_SPI_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 80020ea:	f7ff ffcd 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003f4 	.word	0x200003f4
 80020f8:	40003800 	.word	0x40003800

080020fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <HAL_SPI_MspInit+0x9c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d139      	bne.n	8002190 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_SPI_MspInit+0xa0>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_SPI_MspInit+0xa0>)
 8002122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_SPI_MspInit+0xa0>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_SPI_MspInit+0xa0>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_SPI_MspInit+0xa0>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_SPI_MspInit+0xa0>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800214c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	480f      	ldr	r0, [pc, #60]	; (80021a0 <HAL_SPI_MspInit+0xa4>)
 8002162:	f001 fd6f 	bl	8003c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4619      	mov	r1, r3
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <HAL_SPI_MspInit+0xa4>)
 800217c:	f001 fd62 	bl	8003c44 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2024      	movs	r0, #36	; 0x24
 8002186:	f001 fa88 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800218a:	2024      	movs	r0, #36	; 0x24
 800218c:	f001 faa1 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002190:	bf00      	nop
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40003800 	.word	0x40003800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010c00 	.word	0x40010c00

080021a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_MspInit+0x5c>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_MspInit+0x5c>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6193      	str	r3, [r2, #24]
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_MspInit+0x5c>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x5c>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_MspInit+0x5c>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_MspInit+0x5c>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_MspInit+0x60>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_MspInit+0x60>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000

08002208 <moving_average_1>:

extern int pid_flag;

int timer_1, timer_2;

float moving_average_1(float sample) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	static float samples[MAX_SAMPLES_1] = { 0 };
	static int count = 0;
	static float sum = 0;

	sum += sample - samples[count];
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <moving_average_1+0x70>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <moving_average_1+0x74>)
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7fe fbb9 	bl	8000994 <__aeabi_fsub>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <moving_average_1+0x78>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	4610      	mov	r0, r2
 800222e:	f7fe fbb3 	bl	8000998 <__addsf3>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <moving_average_1+0x78>)
 8002238:	601a      	str	r2, [r3, #0]
	samples[count] = sample;
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <moving_average_1+0x70>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	490f      	ldr	r1, [pc, #60]	; (800227c <moving_average_1+0x74>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count = (count + 1) % MAX_SAMPLES_1;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <moving_average_1+0x70>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <moving_average_1+0x7c>)
 800224e:	fb83 3201 	smull	r3, r2, r3, r1
 8002252:	17cb      	asrs	r3, r1, #31
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	1aca      	subs	r2, r1, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <moving_average_1+0x70>)
 8002260:	601a      	str	r2, [r3, #0]
	return sum / MAX_SAMPLES_1;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <moving_average_1+0x78>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <moving_average_1+0x80>)
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd51 	bl	8000d10 <__aeabi_fdiv>
 800226e:	4603      	mov	r3, r0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000460 	.word	0x20000460
 800227c:	20000464 	.word	0x20000464
 8002280:	20000470 	.word	0x20000470
 8002284:	55555556 	.word	0x55555556
 8002288:	40400000 	.word	0x40400000

0800228c <moving_average_2>:

float moving_average_2(float sample) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	static float samples[MAX_SAMPLES_2] = { 0 };
	static int count = 0;
	static float sum = 0;

	sum += sample - samples[count];
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <moving_average_2+0x70>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <moving_average_2+0x74>)
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fb77 	bl	8000994 <__aeabi_fsub>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <moving_average_2+0x78>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f7fe fb71 	bl	8000998 <__addsf3>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <moving_average_2+0x78>)
 80022bc:	601a      	str	r2, [r3, #0]
	samples[count] = sample;
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <moving_average_2+0x70>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	490f      	ldr	r1, [pc, #60]	; (8002300 <moving_average_2+0x74>)
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count = (count + 1) % MAX_SAMPLES_2;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <moving_average_2+0x70>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <moving_average_2+0x7c>)
 80022d2:	fb83 3201 	smull	r3, r2, r3, r1
 80022d6:	17cb      	asrs	r3, r1, #31
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	1aca      	subs	r2, r1, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <moving_average_2+0x70>)
 80022e4:	601a      	str	r2, [r3, #0]
	return sum / MAX_SAMPLES_2;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <moving_average_2+0x78>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <moving_average_2+0x80>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fd0f 	bl	8000d10 <__aeabi_fdiv>
 80022f2:	4603      	mov	r3, r0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000474 	.word	0x20000474
 8002300:	20000478 	.word	0x20000478
 8002304:	20000484 	.word	0x20000484
 8002308:	55555556 	.word	0x55555556
 800230c:	40400000 	.word	0x40400000

08002310 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002356:	f000 fc97 	bl	8002c88 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	adcFlag = 1;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <DMA1_Channel1_IRQHandler+0x14>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <DMA1_Channel1_IRQHandler+0x18>)
 800236c:	f001 fb36 	bl	80039dc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000188 	.word	0x20000188
 8002378:	20000068 	.word	0x20000068

0800237c <TIM1_UP_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt.
 */
void TIM1_UP_IRQHandler(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (_ENABLE_MOTOR_1) {
		encoderDirectionMot1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1);
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <TIM1_UP_IRQHandler+0x4c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b10      	cmp	r3, #16
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <TIM1_UP_IRQHandler+0x50>)
 8002398:	701a      	strb	r2, [r3, #0]

		if (encoderDirectionMot1)
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <TIM1_UP_IRQHandler+0x50>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <TIM1_UP_IRQHandler+0x36>
			enc1Val -= 1000;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <TIM1_UP_IRQHandler+0x54>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80023ac:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <TIM1_UP_IRQHandler+0x54>)
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e005      	b.n	80023be <TIM1_UP_IRQHandler+0x42>
		else
			enc1Val += 1000;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <TIM1_UP_IRQHandler+0x54>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <TIM1_UP_IRQHandler+0x54>)
 80023bc:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80023be:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM1_UP_IRQHandler+0x4c>)
 80023c0:	f003 fb44 	bl	8005a4c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_IRQn 1 */

	/* USER CODE END TIM1_UP_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000488 	.word	0x20000488
 80023cc:	20000459 	.word	0x20000459
 80023d0:	200001a0 	.word	0x200001a0

080023d4 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	if (_ENABLE_MOTOR_2) {
		encoderDirectionMot2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <TIM2_IRQHandler+0x4c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <TIM2_IRQHandler+0x50>)
 80023f0:	701a      	strb	r2, [r3, #0]

		if (encoderDirectionMot2)
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <TIM2_IRQHandler+0x50>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <TIM2_IRQHandler+0x36>
			enc2Val -= 1000;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <TIM2_IRQHandler+0x54>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <TIM2_IRQHandler+0x54>)
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e005      	b.n	8002416 <TIM2_IRQHandler+0x42>
		else
			enc2Val += 1000;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <TIM2_IRQHandler+0x54>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <TIM2_IRQHandler+0x54>)
 8002414:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM2_IRQHandler+0x4c>)
 8002418:	f003 fb18 	bl	8005a4c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200004d0 	.word	0x200004d0
 8002424:	20000458 	.word	0x20000458
 8002428:	200001ac 	.word	0x200001ac
 800242c:	00000000 	.word	0x00000000

08002430 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8002430:	b598      	push	{r3, r4, r7, lr}
 8002432:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	pid_flag = 1;
 8002434:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <TIM3_IRQHandler+0x188>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
	if (_ENABLE_MOTOR_1) {
		resultEncValMot1 = enc1Val + enc1Value;
 800243a:	4b60      	ldr	r3, [pc, #384]	; (80025bc <TIM3_IRQHandler+0x18c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <TIM3_IRQHandler+0x190>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <TIM3_IRQHandler+0x194>)
 800244a:	6013      	str	r3, [r2, #0]
		motor_1.angle = (float) (resultEncValMot1) / 1000 * 360;
 800244c:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <TIM3_IRQHandler+0x194>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fb55 	bl	8000b00 <__aeabi_i2f>
 8002456:	4603      	mov	r3, r0
 8002458:	495b      	ldr	r1, [pc, #364]	; (80025c8 <TIM3_IRQHandler+0x198>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fc58 	bl	8000d10 <__aeabi_fdiv>
 8002460:	4603      	mov	r3, r0
 8002462:	495a      	ldr	r1, [pc, #360]	; (80025cc <TIM3_IRQHandler+0x19c>)
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fb9f 	bl	8000ba8 <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <TIM3_IRQHandler+0x1a0>)
 8002470:	651a      	str	r2, [r3, #80]	; 0x50

	}
	/*----�������� �������������� �������� �����, ������� �������� ��������� �2----*/
	if (_ENABLE_MOTOR_2) {
		resultEncValMot2 = enc2Val + enc2Value;
 8002472:	4b58      	ldr	r3, [pc, #352]	; (80025d4 <TIM3_IRQHandler+0x1a4>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <TIM3_IRQHandler+0x1a8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <TIM3_IRQHandler+0x1ac>)
 8002482:	6013      	str	r3, [r2, #0]
		motor_2.angle = -(float) +resultEncValMot2 / 1000 * 360;
 8002484:	4b55      	ldr	r3, [pc, #340]	; (80025dc <TIM3_IRQHandler+0x1ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fb39 	bl	8000b00 <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002494:	494c      	ldr	r1, [pc, #304]	; (80025c8 <TIM3_IRQHandler+0x198>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc3a 	bl	8000d10 <__aeabi_fdiv>
 800249c:	4603      	mov	r3, r0
 800249e:	494b      	ldr	r1, [pc, #300]	; (80025cc <TIM3_IRQHandler+0x19c>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fb81 	bl	8000ba8 <__aeabi_fmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <TIM3_IRQHandler+0x1b0>)
 80024ac:	651a      	str	r2, [r3, #80]	; 0x50
	}

	/*----���� ����������� �� �������----*/
	timed++;
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <TIM3_IRQHandler+0x1b4>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <TIM3_IRQHandler+0x1b4>)
 80024ba:	801a      	strh	r2, [r3, #0]
	if (timed >= 300) {
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <TIM3_IRQHandler+0x1b4>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024c6:	d36c      	bcc.n	80025a2 <TIM3_IRQHandler+0x172>
		if (_ENABLE_MOTOR_1) {
			deltVelMot1 = (float) resultEncValMot1 - (float) pervTickMot1;
 80024c8:	4b3e      	ldr	r3, [pc, #248]	; (80025c4 <TIM3_IRQHandler+0x194>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fb17 	bl	8000b00 <__aeabi_i2f>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <TIM3_IRQHandler+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fb11 	bl	8000b00 <__aeabi_i2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7fe fa56 	bl	8000994 <__aeabi_fsub>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <TIM3_IRQHandler+0x1bc>)
 80024ee:	601a      	str	r2, [r3, #0]
			pervTickMot1 = resultEncValMot1;
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <TIM3_IRQHandler+0x194>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <TIM3_IRQHandler+0x1b8>)
 80024f6:	6013      	str	r3, [r2, #0]
		}
		if (_ENABLE_MOTOR_2) {
			deltVelMot2 = (float) resultEncValMot2 - (float) pervTickMot2;
 80024f8:	4b38      	ldr	r3, [pc, #224]	; (80025dc <TIM3_IRQHandler+0x1ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe faff 	bl	8000b00 <__aeabi_i2f>
 8002502:	4604      	mov	r4, r0
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <TIM3_IRQHandler+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe faf9 	bl	8000b00 <__aeabi_i2f>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f7fe fa3e 	bl	8000994 <__aeabi_fsub>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <TIM3_IRQHandler+0x1c4>)
 800251e:	601a      	str	r2, [r3, #0]
			pervTickMot2 = resultEncValMot2;
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <TIM3_IRQHandler+0x1ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <TIM3_IRQHandler+0x1c0>)
 8002526:	6013      	str	r3, [r2, #0]
		}
		if (_ENABLE_MOTOR_1) {
			motor_1.speed = moving_average_1((deltVelMot1 * 60) / (999 * 0.1));
 8002528:	4b30      	ldr	r3, [pc, #192]	; (80025ec <TIM3_IRQHandler+0x1bc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4932      	ldr	r1, [pc, #200]	; (80025f8 <TIM3_IRQHandler+0x1c8>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fb3a 	bl	8000ba8 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ff6e 	bl	8000418 <__aeabi_f2d>
 800253c:	a31c      	add	r3, pc, #112	; (adr r3, 80025b0 <TIM3_IRQHandler+0x180>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f8eb 	bl	800071c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe f9cd 	bl	80008ec <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe57 	bl	8002208 <moving_average_1>
 800255a:	4603      	mov	r3, r0
 800255c:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <TIM3_IRQHandler+0x1a0>)
 800255e:	6553      	str	r3, [r2, #84]	; 0x54
		}
		if (_ENABLE_MOTOR_2) {
			motor_2.speed =  moving_average_2((-deltVelMot2 * 60) / (999 * 0.1));
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <TIM3_IRQHandler+0x1c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002568:	4923      	ldr	r1, [pc, #140]	; (80025f8 <TIM3_IRQHandler+0x1c8>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fb1c 	bl	8000ba8 <__aeabi_fmul>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ff50 	bl	8000418 <__aeabi_f2d>
 8002578:	a30d      	add	r3, pc, #52	; (adr r3, 80025b0 <TIM3_IRQHandler+0x180>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f7fe f8cd 	bl	800071c <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe f9af 	bl	80008ec <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe7b 	bl	800228c <moving_average_2>
 8002596:	4603      	mov	r3, r0
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <TIM3_IRQHandler+0x1b0>)
 800259a:	6553      	str	r3, [r2, #84]	; 0x54
		}
		timed = 0;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <TIM3_IRQHandler+0x1b4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
	}
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <TIM3_IRQHandler+0x1cc>)
 80025a4:	f003 fa52 	bl	8005a4c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd98      	pop	{r3, r4, r7, pc}
 80025ac:	f3af 8000 	nop.w
 80025b0:	9999999a 	.word	0x9999999a
 80025b4:	4058f999 	.word	0x4058f999
 80025b8:	2000019c 	.word	0x2000019c
 80025bc:	20000198 	.word	0x20000198
 80025c0:	200001a0 	.word	0x200001a0
 80025c4:	200001a4 	.word	0x200001a4
 80025c8:	447a0000 	.word	0x447a0000
 80025cc:	43b40000 	.word	0x43b40000
 80025d0:	200000ac 	.word	0x200000ac
 80025d4:	2000019a 	.word	0x2000019a
 80025d8:	200001ac 	.word	0x200001ac
 80025dc:	200001b0 	.word	0x200001b0
 80025e0:	20000118 	.word	0x20000118
 80025e4:	2000044c 	.word	0x2000044c
 80025e8:	200001a8 	.word	0x200001a8
 80025ec:	20000450 	.word	0x20000450
 80025f0:	200001b4 	.word	0x200001b4
 80025f4:	20000454 	.word	0x20000454
 80025f8:	42700000 	.word	0x42700000
 80025fc:	20000518 	.word	0x20000518

08002600 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */
	interrupt_enable++;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <TIM4_IRQHandler+0x38>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <TIM4_IRQHandler+0x38>)
 800260c:	6013      	str	r3, [r2, #0]
	if (interrupt_enable > 1) {
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <TIM4_IRQHandler+0x38>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	dd0b      	ble.n	800262e <TIM4_IRQHandler+0x2e>
		HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*) (slave_transmit),
 8002616:	2318      	movs	r3, #24
 8002618:	4a08      	ldr	r2, [pc, #32]	; (800263c <TIM4_IRQHandler+0x3c>)
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <TIM4_IRQHandler+0x40>)
 800261c:	4809      	ldr	r0, [pc, #36]	; (8002644 <TIM4_IRQHandler+0x44>)
 800261e:	f002 f9d7 	bl	80049d0 <HAL_SPI_TransmitReceive_IT>
				(uint8_t*) (slave_receive), 24);
		HAL_TIM_Base_Stop_IT(&htim4);
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <TIM4_IRQHandler+0x48>)
 8002624:	f002 fece 	bl	80053c4 <HAL_TIM_Base_Stop_IT>
		interrupt_enable = 0;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <TIM4_IRQHandler+0x38>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	}

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <TIM4_IRQHandler+0x48>)
 8002630:	f003 fa0c 	bl	8005a4c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	2000045c 	.word	0x2000045c
 800263c:	200001e4 	.word	0x200001e4
 8002640:	200001cc 	.word	0x200001cc
 8002644:	200003f4 	.word	0x200003f4
 8002648:	20000560 	.word	0x20000560

0800264c <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI2_IRQn 0 */
	if (__HAL_SPI_GET_FLAG(&hspi2,
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <SPI2_IRQHandler+0x48>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d114      	bne.n	8002688 <SPI2_IRQHandler+0x3c>
			SPI_FLAG_RXNE) && __HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_TXE)) {
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <SPI2_IRQHandler+0x48>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d10d      	bne.n	8002688 <SPI2_IRQHandler+0x3c>

		if (HAL_SPI_GetError(&hspi2) != HAL_SPI_ERROR_NONE) {
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <SPI2_IRQHandler+0x48>)
 800266e:	f002 fb58 	bl	8004d22 <HAL_SPI_GetError>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <SPI2_IRQHandler+0x3a>
			memset(slave_receive, 0, 24);
 8002678:	2218      	movs	r2, #24
 800267a:	2100      	movs	r1, #0
 800267c:	4806      	ldr	r0, [pc, #24]	; (8002698 <SPI2_IRQHandler+0x4c>)
 800267e:	f003 ffd5 	bl	800662c <memset>
			asm("NOP");
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <SPI2_IRQHandler+0x3c>
		} else {
			asm("NOP");
 8002686:	bf00      	nop
		}
	}
	/* USER CODE END SPI2_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi2);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <SPI2_IRQHandler+0x48>)
 800268a:	f002 fa49 	bl	8004b20 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI2_IRQn 1 */

	/* USER CODE END SPI2_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200003f4 	.word	0x200003f4
 8002698:	200001e4 	.word	0x200001e4

0800269c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 ffb8 	bl	800662c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <MX_TIM1_Init+0xac>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002708:	2301      	movs	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <MX_TIM1_Init+0xa8>)
 800271c:	f002 ffb8 	bl	8005690 <HAL_TIM_Encoder_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002726:	f7ff fcaf 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4806      	ldr	r0, [pc, #24]	; (8002750 <MX_TIM1_Init+0xa8>)
 8002738:	f003 fee4 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002742:	f7ff fca1 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000488 	.word	0x20000488
 8002754:	40012c00 	.word	0x40012c00

08002758 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f003 ff60 	bl	800662c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <MX_TIM2_Init+0xa4>)
 8002776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800277a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <MX_TIM2_Init+0xa4>)
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <MX_TIM2_Init+0xa4>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <MX_TIM2_Init+0xa4>)
 800278a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800278e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_TIM2_Init+0xa4>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <MX_TIM2_Init+0xa4>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800279c:	2301      	movs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4619      	mov	r1, r3
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <MX_TIM2_Init+0xa4>)
 80027c8:	f002 ff62 	bl	8005690 <HAL_TIM_Encoder_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027d2:	f7ff fc59 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4806      	ldr	r0, [pc, #24]	; (80027fc <MX_TIM2_Init+0xa4>)
 80027e4:	f003 fe8e 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027ee:	f7ff fc4b 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	3730      	adds	r7, #48	; 0x30
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200004d0 	.word	0x200004d0

08002800 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <MX_TIM3_Init+0xc0>)
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <MX_TIM3_Init+0xc4>)
 8002826:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <MX_TIM3_Init+0xc0>)
 800282a:	220b      	movs	r2, #11
 800282c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <MX_TIM3_Init+0xc0>)
 8002830:	2220      	movs	r2, #32
 8002832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <MX_TIM3_Init+0xc0>)
 8002836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <MX_TIM3_Init+0xc0>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <MX_TIM3_Init+0xc0>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002848:	481d      	ldr	r0, [pc, #116]	; (80028c0 <MX_TIM3_Init+0xc0>)
 800284a:	f002 fde9 	bl	8005420 <HAL_TIM_PWM_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002854:	f7ff fc18 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002858:	2320      	movs	r3, #32
 800285a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002860:	f107 0320 	add.w	r3, r7, #32
 8002864:	4619      	mov	r1, r3
 8002866:	4816      	ldr	r0, [pc, #88]	; (80028c0 <MX_TIM3_Init+0xc0>)
 8002868:	f003 fe4c 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002872:	f7ff fc09 	bl	8002088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002876:	2360      	movs	r3, #96	; 0x60
 8002878:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2200      	movs	r2, #0
 800288a:	4619      	mov	r1, r3
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <MX_TIM3_Init+0xc0>)
 800288e:	f003 f9e5 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002898:	f7ff fbf6 	bl	8002088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2204      	movs	r2, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <MX_TIM3_Init+0xc0>)
 80028a4:	f003 f9da 	bl	8005c5c <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80028ae:	f7ff fbeb 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <MX_TIM3_Init+0xc0>)
 80028b4:	f000 f94a 	bl	8002b4c <HAL_TIM_MspPostInit>

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000518 	.word	0x20000518
 80028c4:	40000400 	.word	0x40000400

080028c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028dc:	463b      	mov	r3, r7
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_TIM4_Init+0x94>)
 80028e6:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <MX_TIM4_Init+0x98>)
 80028e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_TIM4_Init+0x94>)
 80028ec:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80028f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM4_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1500-1;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM4_Init+0x94>)
 80028fa:	f240 52db 	movw	r2, #1499	; 0x5db
 80028fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_TIM4_Init+0x94>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_TIM4_Init+0x94>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800290c:	4813      	ldr	r0, [pc, #76]	; (800295c <MX_TIM4_Init+0x94>)
 800290e:	f002 fcb7 	bl	8005280 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002918:	f7ff fbb6 	bl	8002088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	4619      	mov	r1, r3
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <MX_TIM4_Init+0x94>)
 800292a:	f003 fa55 	bl	8005dd8 <HAL_TIM_ConfigClockSource>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002934:	f7ff fba8 	bl	8002088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_TIM4_Init+0x94>)
 8002946:	f003 fddd 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002950:	f7ff fb9a 	bl	8002088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000560 	.word	0x20000560
 8002960:	40000800 	.word	0x40000800

08002964 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a48      	ldr	r2, [pc, #288]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d12d      	bne.n	80029e0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002984:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 800298a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	4837      	ldr	r0, [pc, #220]	; (8002aa8 <HAL_TIM_Encoder_MspInit+0x144>)
 80029ca:	f001 f93b 	bl	8003c44 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	2019      	movs	r0, #25
 80029d4:	f000 fe61 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029d8:	2019      	movs	r0, #25
 80029da:	f000 fe7a 	bl	80036d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029de:	e05b      	b.n	8002a98 <HAL_TIM_Encoder_MspInit+0x134>
  else if(tim_encoderHandle->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d156      	bne.n	8002a98 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6193      	str	r3, [r2, #24]
 8002a0e:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6193      	str	r3, [r2, #24]
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4818      	ldr	r0, [pc, #96]	; (8002aa8 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a48:	f001 f8fc 	bl	8003c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4813      	ldr	r0, [pc, #76]	; (8002aac <HAL_TIM_Encoder_MspInit+0x148>)
 8002a60:	f001 f8f0 	bl	8003c44 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	201c      	movs	r0, #28
 8002a8e:	f000 fe04 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a92:	201c      	movs	r0, #28
 8002a94:	f000 fe1d 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010800 	.word	0x40010800
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_TIM_PWM_MspInit+0x44>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d113      	bne.n	8002aee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	61d3      	str	r3, [r2, #28]
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	201d      	movs	r0, #29
 8002ae4:	f000 fdd9 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ae8:	201d      	movs	r0, #29
 8002aea:	f000 fdf2 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_TIM_Base_MspInit+0x44>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	201e      	movs	r0, #30
 8002b30:	f000 fdb3 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b34:	201e      	movs	r0, #30
 8002b36:	f000 fdcc 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_TIM_MspPostInit+0x58>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d117      	bne.n	8002b9c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_TIM_MspPostInit+0x5c>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_TIM_MspPostInit+0x5c>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_TIM_MspPostInit+0x5c>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b84:	23c0      	movs	r3, #192	; 0xc0
 8002b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	4619      	mov	r1, r3
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_TIM_MspPostInit+0x60>)
 8002b98:	f001 f854 	bl	8003c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b9c:	bf00      	nop
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010800 	.word	0x40010800

08002bb0 <Reset_Handler>:
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <LoopFillZerobss+0x12>)
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <LoopFillZerobss+0x16>)
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <LoopFillZerobss+0x1a>)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:
 8002bba:	58d4      	ldr	r4, [r2, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:
 8002bc0:	18c4      	adds	r4, r0, r3
 8002bc2:	428c      	cmp	r4, r1
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <LoopFillZerobss+0x1e>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <LoopFillZerobss+0x22>)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:
 8002bd2:	42a2      	cmp	r2, r4
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>
 8002bd6:	f7ff fd61 	bl	800269c <SystemInit>
 8002bda:	f003 fd03 	bl	80065e4 <__libc_init_array>
 8002bde:	f7fe fc93 	bl	8001508 <main>
 8002be2:	4770      	bx	lr
 8002be4:	20000000 	.word	0x20000000
 8002be8:	2000001c 	.word	0x2000001c
 8002bec:	0800667c 	.word	0x0800667c
 8002bf0:	2000001c 	.word	0x2000001c
 8002bf4:	200005ac 	.word	0x200005ac

08002bf8 <ADC1_2_IRQHandler>:
 8002bf8:	e7fe      	b.n	8002bf8 <ADC1_2_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_Init+0x28>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_Init+0x28>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 fd39 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	200f      	movs	r0, #15
 8002c14:	f000 f808 	bl	8002c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff fac4 	bl	80021a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40022000 	.word	0x40022000

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x54>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x58>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fd51 	bl	80036ee <HAL_SYSTICK_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00e      	b.n	8002c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d80a      	bhi.n	8002c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f000 fd19 	bl	800369a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <HAL_InitTick+0x5c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000018 	.word	0x20000018
 8002c84:	20000014 	.word	0x20000014

08002c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x1c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	20000018 	.word	0x20000018
 8002ca8:	200005a8 	.word	0x200005a8

08002cac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_GetTick+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	200005a8 	.word	0x200005a8

08002cc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0be      	b.n	8002e60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f9ac 	bl	800105c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fb49 	bl	800339c <ADC_ConversionStop_Disable>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8099 	bne.w	8002e4e <HAL_ADC_Init+0x18e>
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 8095 	bne.w	8002e4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	f043 0202 	orr.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7b1b      	ldrb	r3, [r3, #12]
 8002d46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d58:	d003      	beq.n	8002d62 <HAL_ADC_Init+0xa2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_ADC_Init+0xa8>
 8002d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d66:	e000      	b.n	8002d6a <HAL_ADC_Init+0xaa>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7d1b      	ldrb	r3, [r3, #20]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d119      	bne.n	8002dac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7b1b      	ldrb	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	035a      	lsls	r2, r3, #13
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e00b      	b.n	8002dac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_ADC_Init+0x1a8>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d003      	beq.n	8002de6 <HAL_ADC_Init+0x126>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d104      	bne.n	8002df0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	051b      	lsls	r3, r3, #20
 8002dee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_ADC_Init+0x1ac>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d10b      	bne.n	8002e2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e2a:	e018      	b.n	8002e5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f023 0312 	bic.w	r3, r3, #18
 8002e34:	f043 0210 	orr.w	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e4c:	e007      	b.n	8002e5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f043 0210 	orr.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	ffe1f7fd 	.word	0xffe1f7fd
 8002e6c:	ff1f0efe 	.word	0xff1f0efe

08002e70 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a64      	ldr	r2, [pc, #400]	; (8003018 <HAL_ADC_Start_DMA+0x1a8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_Start_DMA+0x24>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_ADC_Start_DMA+0x1ac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_Start_DMA+0x32>
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <HAL_ADC_Start_DMA+0x1a8>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 80b3 	bne.w	8003008 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_Start_DMA+0x40>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0ae      	b.n	800300e <HAL_ADC_Start_DMA+0x19e>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa15 	bl	80032e8 <ADC_Enable>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 809a 	bne.w	8002ffe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_ADC_Start_DMA+0x1ac>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_Start_DMA+0x84>
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <HAL_ADC_Start_DMA+0x1a8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d115      	bne.n	8002f20 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d026      	beq.n	8002f5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f1e:	e01d      	b.n	8002f5c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_ADC_Start_DMA+0x1a8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_Start_DMA+0xd0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_ADC_Start_DMA+0x1ac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10d      	bne.n	8002f5c <HAL_ADC_Start_DMA+0xec>
 8002f40:	4b35      	ldr	r3, [pc, #212]	; (8003018 <HAL_ADC_Start_DMA+0x1a8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	f023 0206 	bic.w	r2, r3, #6
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a25      	ldr	r2, [pc, #148]	; (8003020 <HAL_ADC_Start_DMA+0x1b0>)
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <HAL_ADC_Start_DMA+0x1b4>)
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a23      	ldr	r2, [pc, #140]	; (8003028 <HAL_ADC_Start_DMA+0x1b8>)
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a18      	ldr	r0, [r3, #32]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	334c      	adds	r3, #76	; 0x4c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f000 fbf9 	bl	80037bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fd8:	d108      	bne.n	8002fec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002fe8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fea:	e00f      	b.n	800300c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ffa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ffc:	e006      	b.n	800300c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003006:	e001      	b.n	800300c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40012400 	.word	0x40012400
 800301c:	40012800 	.word	0x40012800
 8003020:	0800341f 	.word	0x0800341f
 8003024:	0800349b 	.word	0x0800349b
 8003028:	080034b7 	.word	0x080034b7

0800302c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_ADC_Stop_DMA+0x1a>
 8003042:	2302      	movs	r3, #2
 8003044:	e039      	b.n	80030ba <HAL_ADC_Stop_DMA+0x8e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9a4 	bl	800339c <ADC_ConversionStop_Disable>
 8003054:	4603      	mov	r3, r0
 8003056:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d128      	bne.n	80030b0 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11a      	bne.n	80030b0 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fbfb 	bl	800387a <HAL_DMA_Abort>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
 80030a2:	e005      	b.n	80030b0 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x20>
 8003114:	2302      	movs	r3, #2
 8003116:	e0dc      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x1da>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d81c      	bhi.n	8003162 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b05      	subs	r3, #5
 800313a:	221f      	movs	r2, #31
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	4019      	ands	r1, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b05      	subs	r3, #5
 8003154:	fa00 f203 	lsl.w	r2, r0, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
 8003160:	e03c      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d81c      	bhi.n	80031a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b23      	subs	r3, #35	; 0x23
 800317c:	221f      	movs	r2, #31
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	4019      	ands	r1, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b23      	subs	r3, #35	; 0x23
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
 80031a2:	e01b      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b41      	subs	r3, #65	; 0x41
 80031b6:	221f      	movs	r2, #31
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	4019      	ands	r1, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	; 0x41
 80031d0:	fa00 f203 	lsl.w	r2, r0, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d91c      	bls.n	800321e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68d9      	ldr	r1, [r3, #12]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	3b1e      	subs	r3, #30
 80031f6:	2207      	movs	r2, #7
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	4019      	ands	r1, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6898      	ldr	r0, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4413      	add	r3, r2
 800320e:	3b1e      	subs	r3, #30
 8003210:	fa00 f203 	lsl.w	r2, r0, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e019      	b.n	8003252 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6919      	ldr	r1, [r3, #16]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	2207      	movs	r2, #7
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	4019      	ands	r1, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6898      	ldr	r0, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d003      	beq.n	8003262 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800325e:	2b11      	cmp	r3, #17
 8003260:	d132      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d125      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d126      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003288:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d11a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9a      	lsrs	r2, r3, #18
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f9      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x1b2>
 80032b6:	e007      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012400 	.word	0x40012400
 80032e0:	20000010 	.word	0x20000010
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d040      	beq.n	8003388 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <ADC_Enable+0xac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <ADC_Enable+0xb0>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003324:	e002      	b.n	800332c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3b01      	subs	r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003332:	f7ff fcbb 	bl	8002cac <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003338:	e01f      	b.n	800337a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333a:	f7ff fcb7 	bl	8002cac <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d918      	bls.n	800337a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b01      	cmp	r3, #1
 8003354:	d011      	beq.n	800337a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d1d8      	bne.n	800333a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000010 	.word	0x20000010
 8003398:	431bde83 	.word	0x431bde83

0800339c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d12e      	bne.n	8003414 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033c6:	f7ff fc71 	bl	8002cac <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033cc:	e01b      	b.n	8003406 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033ce:	f7ff fc6d 	bl	8002cac <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d914      	bls.n	8003406 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10d      	bne.n	8003406 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	f043 0210 	orr.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e007      	b.n	8003416 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d0dc      	beq.n	80033ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003434:	2b00      	cmp	r3, #0
 8003436:	d127      	bne.n	8003488 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800344e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003452:	d115      	bne.n	8003480 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fe1e 	bl	80030c2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003486:	e004      	b.n	8003492 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff fe13 	bl	80030d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fe02 	bl	80030e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4906      	ldr	r1, [pc, #24]	; (8003584 <__NVIC_EnableIRQ+0x34>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003650:	d301      	bcc.n	8003656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <SysTick_Config+0x40>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365e:	210f      	movs	r1, #15
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f7ff ff90 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <SysTick_Config+0x40>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SysTick_Config+0x40>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff2d 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff42 	bl	8003534 <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff90 	bl	80035dc <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5f 	bl	8003588 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff35 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffa2 	bl	8003640 <SysTick_Config>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e043      	b.n	80037a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_DMA_Init+0xa8>)
 8003726:	4413      	add	r3, r2
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <HAL_DMA_Init+0xac>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	009a      	lsls	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_DMA_Init+0xb0>)
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	bffdfff8 	.word	0xbffdfff8
 80037b4:	cccccccd 	.word	0xcccccccd
 80037b8:	40020000 	.word	0x40020000

080037bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_DMA_Start_IT+0x20>
 80037d8:	2302      	movs	r3, #2
 80037da:	e04a      	b.n	8003872 <HAL_DMA_Start_IT+0xb6>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d13a      	bne.n	8003864 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f9e8 	bl	8003be8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 020e 	orr.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e00f      	b.n	8003852 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0204 	bic.w	r2, r2, #4
 8003840:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 020a 	orr.w	r2, r2, #10
 8003850:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e005      	b.n	8003870 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003902:	2b02      	cmp	r3, #2
 8003904:	d005      	beq.n	8003912 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e051      	b.n	80039b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_DMA_Abort_IT+0xd0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d029      	beq.n	8003990 <HAL_DMA_Abort_IT+0xa0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_Abort_IT+0xd4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Abort_IT+0x9c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_DMA_Abort_IT+0xd8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01a      	beq.n	8003986 <HAL_DMA_Abort_IT+0x96>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_DMA_Abort_IT+0xdc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d012      	beq.n	8003980 <HAL_DMA_Abort_IT+0x90>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_DMA_Abort_IT+0xe0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00a      	beq.n	800397a <HAL_DMA_Abort_IT+0x8a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_DMA_Abort_IT+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d102      	bne.n	8003974 <HAL_DMA_Abort_IT+0x84>
 800396e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003972:	e00e      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003978:	e00b      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 800397a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397e:	e008      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003984:	e005      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398a:	e002      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 800398c:	2310      	movs	r3, #16
 800398e:	e000      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003990:	2301      	movs	r3, #1
 8003992:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_DMA_Abort_IT+0xe8>)
 8003994:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
    } 
  }
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40020008 	.word	0x40020008
 80039c4:	4002001c 	.word	0x4002001c
 80039c8:	40020030 	.word	0x40020030
 80039cc:	40020044 	.word	0x40020044
 80039d0:	40020058 	.word	0x40020058
 80039d4:	4002006c 	.word	0x4002006c
 80039d8:	40020000 	.word	0x40020000

080039dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	2204      	movs	r2, #4
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d04f      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xc8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a66      	ldr	r2, [pc, #408]	; (8003bcc <HAL_DMA_IRQHandler+0x1f0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d029      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xae>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a65      	ldr	r2, [pc, #404]	; (8003bd0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xaa>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a63      	ldr	r2, [pc, #396]	; (8003bd4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01a      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xa4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a62      	ldr	r2, [pc, #392]	; (8003bd8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d012      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x9e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a60      	ldr	r2, [pc, #384]	; (8003bdc <HAL_DMA_IRQHandler+0x200>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00a      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x98>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5f      	ldr	r2, [pc, #380]	; (8003be0 <HAL_DMA_IRQHandler+0x204>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d102      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x92>
 8003a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a6c:	e00e      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a72:	e00b      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a78:	e008      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a7e:	e005      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a84:	e002      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	e000      	b.n	8003a8c <HAL_DMA_IRQHandler+0xb0>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <HAL_DMA_IRQHandler+0x208>)
 8003a8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8094 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003aa2:	e08e      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d056      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x186>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d051      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 020a 	bic.w	r2, r2, #10
 8003ada:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_DMA_IRQHandler+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d029      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x166>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <HAL_DMA_IRQHandler+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x162>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <HAL_DMA_IRQHandler+0x1f8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01a      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x15c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a34      	ldr	r2, [pc, #208]	; (8003bd8 <HAL_DMA_IRQHandler+0x1fc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d012      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x156>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_DMA_IRQHandler+0x200>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00a      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x150>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a31      	ldr	r2, [pc, #196]	; (8003be0 <HAL_DMA_IRQHandler+0x204>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d102      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x14a>
 8003b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b24:	e00e      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2a:	e00b      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b30:	e008      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b3c:	e002      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b3e:	2320      	movs	r3, #32
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0x168>
 8003b42:	2302      	movs	r3, #2
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_DMA_IRQHandler+0x208>)
 8003b46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d034      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b60:	e02f      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2208      	movs	r2, #8
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d028      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x1e8>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020e 	bic.w	r2, r2, #14
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
    }
  }
  return;
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
}
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40020008 	.word	0x40020008
 8003bd0:	4002001c 	.word	0x4002001c
 8003bd4:	40020030 	.word	0x40020030
 8003bd8:	40020044 	.word	0x40020044
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	4002006c 	.word	0x4002006c
 8003be4:	40020000 	.word	0x40020000

08003be8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f202 	lsl.w	r2, r1, r2
 8003c04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d108      	bne.n	8003c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c26:	e007      	b.n	8003c38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b08b      	sub	sp, #44	; 0x2c
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	e169      	b.n	8003f2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c58:	2201      	movs	r2, #1
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f040 8158 	bne.w	8003f26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a9a      	ldr	r2, [pc, #616]	; (8003ee4 <HAL_GPIO_Init+0x2a0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d05e      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
 8003c80:	4a98      	ldr	r2, [pc, #608]	; (8003ee4 <HAL_GPIO_Init+0x2a0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d875      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003c86:	4a98      	ldr	r2, [pc, #608]	; (8003ee8 <HAL_GPIO_Init+0x2a4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d058      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
 8003c8c:	4a96      	ldr	r2, [pc, #600]	; (8003ee8 <HAL_GPIO_Init+0x2a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d86f      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003c92:	4a96      	ldr	r2, [pc, #600]	; (8003eec <HAL_GPIO_Init+0x2a8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d052      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
 8003c98:	4a94      	ldr	r2, [pc, #592]	; (8003eec <HAL_GPIO_Init+0x2a8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d869      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003c9e:	4a94      	ldr	r2, [pc, #592]	; (8003ef0 <HAL_GPIO_Init+0x2ac>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04c      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
 8003ca4:	4a92      	ldr	r2, [pc, #584]	; (8003ef0 <HAL_GPIO_Init+0x2ac>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d863      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003caa:	4a92      	ldr	r2, [pc, #584]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d046      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
 8003cb0:	4a90      	ldr	r2, [pc, #576]	; (8003ef4 <HAL_GPIO_Init+0x2b0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d85d      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d82a      	bhi.n	8003d10 <HAL_GPIO_Init+0xcc>
 8003cba:	2b12      	cmp	r3, #18
 8003cbc:	d859      	bhi.n	8003d72 <HAL_GPIO_Init+0x12e>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_GPIO_Init+0x80>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003d3f 	.word	0x08003d3f
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d2b 	.word	0x08003d2b
 8003cd0:	08003d6d 	.word	0x08003d6d
 8003cd4:	08003d73 	.word	0x08003d73
 8003cd8:	08003d73 	.word	0x08003d73
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003d73 	.word	0x08003d73
 8003ce4:	08003d73 	.word	0x08003d73
 8003ce8:	08003d73 	.word	0x08003d73
 8003cec:	08003d73 	.word	0x08003d73
 8003cf0:	08003d73 	.word	0x08003d73
 8003cf4:	08003d73 	.word	0x08003d73
 8003cf8:	08003d73 	.word	0x08003d73
 8003cfc:	08003d73 	.word	0x08003d73
 8003d00:	08003d73 	.word	0x08003d73
 8003d04:	08003d73 	.word	0x08003d73
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	4a79      	ldr	r2, [pc, #484]	; (8003ef8 <HAL_GPIO_Init+0x2b4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d16:	e02c      	b.n	8003d72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	623b      	str	r3, [r7, #32]
          break;
 8003d1e:	e029      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	3304      	adds	r3, #4
 8003d26:	623b      	str	r3, [r7, #32]
          break;
 8003d28:	e024      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	623b      	str	r3, [r7, #32]
          break;
 8003d32:	e01f      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	623b      	str	r3, [r7, #32]
          break;
 8003d3c:	e01a      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d46:	2304      	movs	r3, #4
 8003d48:	623b      	str	r3, [r7, #32]
          break;
 8003d4a:	e013      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d54:	2308      	movs	r3, #8
 8003d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	611a      	str	r2, [r3, #16]
          break;
 8003d5e:	e009      	b.n	8003d74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d60:	2308      	movs	r3, #8
 8003d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	615a      	str	r2, [r3, #20]
          break;
 8003d6a:	e003      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
          break;
 8003d70:	e000      	b.n	8003d74 <HAL_GPIO_Init+0x130>
          break;
 8003d72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2bff      	cmp	r3, #255	; 0xff
 8003d78:	d801      	bhi.n	8003d7e <HAL_GPIO_Init+0x13a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	e001      	b.n	8003d82 <HAL_GPIO_Init+0x13e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2bff      	cmp	r3, #255	; 0xff
 8003d88:	d802      	bhi.n	8003d90 <HAL_GPIO_Init+0x14c>
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	e002      	b.n	8003d96 <HAL_GPIO_Init+0x152>
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	3b08      	subs	r3, #8
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	210f      	movs	r1, #15
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	431a      	orrs	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80b1 	beq.w	8003f26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc4:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <HAL_GPIO_Init+0x2b8>)
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	4a4c      	ldr	r2, [pc, #304]	; (8003efc <HAL_GPIO_Init+0x2b8>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6193      	str	r3, [r2, #24]
 8003dd0:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_GPIO_Init+0x2b8>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ddc:	4a48      	ldr	r2, [pc, #288]	; (8003f00 <HAL_GPIO_Init+0x2bc>)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3302      	adds	r3, #2
 8003de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	220f      	movs	r2, #15
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a40      	ldr	r2, [pc, #256]	; (8003f04 <HAL_GPIO_Init+0x2c0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_GPIO_Init+0x1ec>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <HAL_GPIO_Init+0x2c4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00d      	beq.n	8003e2c <HAL_GPIO_Init+0x1e8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3e      	ldr	r2, [pc, #248]	; (8003f0c <HAL_GPIO_Init+0x2c8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <HAL_GPIO_Init+0x1e4>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3d      	ldr	r2, [pc, #244]	; (8003f10 <HAL_GPIO_Init+0x2cc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_GPIO_Init+0x1e0>
 8003e20:	2303      	movs	r3, #3
 8003e22:	e006      	b.n	8003e32 <HAL_GPIO_Init+0x1ee>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e004      	b.n	8003e32 <HAL_GPIO_Init+0x1ee>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e002      	b.n	8003e32 <HAL_GPIO_Init+0x1ee>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_GPIO_Init+0x1ee>
 8003e30:	2300      	movs	r3, #0
 8003e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e34:	f002 0203 	and.w	r2, r2, #3
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	4093      	lsls	r3, r2
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e42:	492f      	ldr	r1, [pc, #188]	; (8003f00 <HAL_GPIO_Init+0x2bc>)
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	492c      	ldr	r1, [pc, #176]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	e006      	b.n	8003e78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	4928      	ldr	r1, [pc, #160]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e84:	4b23      	ldr	r3, [pc, #140]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4922      	ldr	r1, [pc, #136]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	491e      	ldr	r1, [pc, #120]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4918      	ldr	r1, [pc, #96]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	4914      	ldr	r1, [pc, #80]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d021      	beq.n	8003f18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_GPIO_Init+0x2d0>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]
 8003ee0:	e021      	b.n	8003f26 <HAL_GPIO_Init+0x2e2>
 8003ee2:	bf00      	nop
 8003ee4:	10320000 	.word	0x10320000
 8003ee8:	10310000 	.word	0x10310000
 8003eec:	10220000 	.word	0x10220000
 8003ef0:	10210000 	.word	0x10210000
 8003ef4:	10120000 	.word	0x10120000
 8003ef8:	10110000 	.word	0x10110000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40010800 	.word	0x40010800
 8003f08:	40010c00 	.word	0x40010c00
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40011400 	.word	0x40011400
 8003f14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_GPIO_Init+0x304>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <HAL_GPIO_Init+0x304>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	3301      	adds	r3, #1
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f47f ae8e 	bne.w	8003c58 <HAL_GPIO_Init+0x14>
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	372c      	adds	r7, #44	; 0x2c
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e272      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8087 	beq.w	80040aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f9c:	4b92      	ldr	r3, [pc, #584]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d112      	bne.n	8003fda <HAL_RCC_OscConfig+0x5e>
 8003fb4:	4b8c      	ldr	r3, [pc, #560]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc2:	4b89      	ldr	r3, [pc, #548]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d06c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x12c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d168      	bne.n	80040a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e24c      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x76>
 8003fe4:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7f      	ldr	r2, [pc, #508]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e02e      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x98>
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a77      	ldr	r2, [pc, #476]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e01d      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0xbc>
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6e      	ldr	r2, [pc, #440]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0xd4>
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a67      	ldr	r2, [pc, #412]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800404a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe fe28 	bl	8002cac <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe fe24 	bl	8002cac <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e200      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0xe4>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe fe14 	bl	8002cac <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe fe10 	bl	8002cac <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1ec      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x10c>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b6:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040c2:	4b49      	ldr	r3, [pc, #292]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11c      	bne.n	8004108 <HAL_RCC_OscConfig+0x18c>
 80040ce:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d116      	bne.n	8004108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_RCC_OscConfig+0x176>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1c0      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b3d      	ldr	r3, [pc, #244]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4939      	ldr	r1, [pc, #228]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e03a      	b.n	800417e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004110:	4b36      	ldr	r3, [pc, #216]	; (80041ec <HAL_RCC_OscConfig+0x270>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe fdc9 	bl	8002cac <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411e:	f7fe fdc5 	bl	8002cac <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1a1      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413c:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4927      	ldr	r1, [pc, #156]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	e015      	b.n	800417e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <HAL_RCC_OscConfig+0x270>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fda8 	bl	8002cac <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004160:	f7fe fda4 	bl	8002cac <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e180      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03a      	beq.n	8004200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d019      	beq.n	80041c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x274>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7fe fd88 	bl	8002cac <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a0:	f7fe fd84 	bl	8002cac <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e160      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041be:	2001      	movs	r0, #1
 80041c0:	f000 faa6 	bl	8004710 <RCC_Delay>
 80041c4:	e01c      	b.n	8004200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x274>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fe fd6e 	bl	8002cac <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d2:	e00f      	b.n	80041f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fe fd6a 	bl	8002cac <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d908      	bls.n	80041f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e146      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	42420000 	.word	0x42420000
 80041f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b92      	ldr	r3, [pc, #584]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e9      	bne.n	80041d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a6 	beq.w	800435a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4a87      	ldr	r2, [pc, #540]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	61d3      	str	r3, [r2, #28]
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b82      	ldr	r3, [pc, #520]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d118      	bne.n	8004278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004246:	4b7f      	ldr	r3, [pc, #508]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a7e      	ldr	r2, [pc, #504]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004252:	f7fe fd2b 	bl	8002cac <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fe fd27 	bl	8002cac <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b64      	cmp	r3, #100	; 0x64
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e103      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	4b75      	ldr	r3, [pc, #468]	; (8004444 <HAL_RCC_OscConfig+0x4c8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d106      	bne.n	800428e <HAL_RCC_OscConfig+0x312>
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	6213      	str	r3, [r2, #32]
 800428c:	e02d      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x334>
 8004296:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4a69      	ldr	r2, [pc, #420]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6213      	str	r3, [r2, #32]
 80042a2:	4b67      	ldr	r3, [pc, #412]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4a66      	ldr	r2, [pc, #408]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6213      	str	r3, [r2, #32]
 80042ae:	e01c      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d10c      	bne.n	80042d2 <HAL_RCC_OscConfig+0x356>
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4a60      	ldr	r2, [pc, #384]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	6213      	str	r3, [r2, #32]
 80042c4:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4a5d      	ldr	r2, [pc, #372]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6213      	str	r3, [r2, #32]
 80042d0:	e00b      	b.n	80042ea <HAL_RCC_OscConfig+0x36e>
 80042d2:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4a5a      	ldr	r2, [pc, #360]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6213      	str	r3, [r2, #32]
 80042de:	4b58      	ldr	r3, [pc, #352]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d015      	beq.n	800431e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f2:	f7fe fcdb 	bl	8002cac <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fe fcd7 	bl	8002cac <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0b1      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ee      	beq.n	80042fa <HAL_RCC_OscConfig+0x37e>
 800431c:	e014      	b.n	8004348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fe fcc5 	bl	8002cac <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fe fcc1 	bl	8002cac <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e09b      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433c:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ee      	bne.n	8004326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8087 	beq.w	8004472 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d061      	beq.n	8004434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d146      	bne.n	8004406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe fc95 	bl	8002cac <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fe fc91 	bl	8002cac <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e06d      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d108      	bne.n	80043c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a19      	ldr	r1, [r3, #32]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	430b      	orrs	r3, r1
 80043d2:	491b      	ldr	r1, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe fc65 	bl	8002cac <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fc61 	bl	8002cac <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e03d      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46a>
 8004404:	e035      	b.n	8004472 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x4cc>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fc4e 	bl	8002cac <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fc4a 	bl	8002cac <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e026      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x498>
 8004432:	e01e      	b.n	8004472 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e019      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x500>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	429a      	cmp	r2, r3
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0d0      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d910      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 0207 	bic.w	r2, r3, #7
 80044aa:	4965      	ldr	r1, [pc, #404]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b63      	ldr	r3, [pc, #396]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0b8      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a58      	ldr	r2, [pc, #352]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f4:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	494d      	ldr	r1, [pc, #308]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d040      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d115      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07f      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e073      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e06b      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b39      	ldr	r3, [pc, #228]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4936      	ldr	r1, [pc, #216]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004570:	f7fe fb9c 	bl	8002cac <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fe fb98 	bl	8002cac <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e053      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d210      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4922      	ldr	r1, [pc, #136]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e032      	b.n	8004636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800460e:	f000 f821 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004612:	4602      	mov	r2, r0
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	490a      	ldr	r1, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	5ccb      	ldrb	r3, [r1, r3]
 8004622:	fa22 f303 	lsr.w	r3, r2, r3
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1cc>)
 8004628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x1d0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fafa 	bl	8002c28 <HAL_InitTick>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40022000 	.word	0x40022000
 8004644:	40021000 	.word	0x40021000
 8004648:	08006664 	.word	0x08006664
 800464c:	20000010 	.word	0x20000010
 8004650:	20000014 	.word	0x20000014

08004654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b490      	push	{r4, r7}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <HAL_RCC_GetSysClockFreq+0xac>)
 800465c:	1d3c      	adds	r4, r7, #4
 800465e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004664:	f240 2301 	movw	r3, #513	; 0x201
 8004668:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b04      	cmp	r3, #4
 800468c:	d002      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x40>
 800468e:	2b08      	cmp	r3, #8
 8004690:	d003      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x46>
 8004692:	e02b      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004694:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004696:	623b      	str	r3, [r7, #32]
      break;
 8004698:	e02b      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	0c9b      	lsrs	r3, r3, #18
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	3328      	adds	r3, #40	; 0x28
 80046a4:	443b      	add	r3, r7
 80046a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d012      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	0c5b      	lsrs	r3, r3, #17
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	3328      	adds	r3, #40	; 0x28
 80046c2:	443b      	add	r3, r7
 80046c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ce:	fb03 f202 	mul.w	r2, r3, r2
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	e004      	b.n	80046e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	623b      	str	r3, [r7, #32]
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ee:	623b      	str	r3, [r7, #32]
      break;
 80046f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046f2:	6a3b      	ldr	r3, [r7, #32]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc90      	pop	{r4, r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	08006654 	.word	0x08006654
 8004704:	40021000 	.word	0x40021000
 8004708:	007a1200 	.word	0x007a1200
 800470c:	003d0900 	.word	0x003d0900

08004710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <RCC_Delay+0x34>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <RCC_Delay+0x38>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	0a5b      	lsrs	r3, r3, #9
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800472c:	bf00      	nop
  }
  while (Delay --);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	60fa      	str	r2, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f9      	bne.n	800472c <RCC_Delay+0x1c>
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	20000010 	.word	0x20000010
 8004748:	10624dd3 	.word	0x10624dd3

0800474c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d07d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004768:	2300      	movs	r3, #0
 800476a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4b4c      	ldr	r3, [pc, #304]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4a4b      	ldr	r2, [pc, #300]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	61d3      	str	r3, [r2, #28]
 8004784:	4b49      	ldr	r3, [pc, #292]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d118      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a42      	ldr	r2, [pc, #264]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ac:	f7fe fa7e 	bl	8002cac <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b4:	f7fe fa7a 	bl	8002cac <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e06d      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02e      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d027      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f0:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004800:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d014      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fe fa49 	bl	8002cac <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fe fa45 	bl	8002cac <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e036      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ee      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4917      	ldr	r1, [pc, #92]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	4313      	orrs	r3, r2
 8004850:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4a13      	ldr	r2, [pc, #76]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	490b      	ldr	r1, [pc, #44]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40007000 	.word	0x40007000
 80048b4:	42420440 	.word	0x42420440

080048b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07e      	b.n	80049c8 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048da:	d009      	beq.n	80048f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	61da      	str	r2, [r3, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fd fbf9 	bl	80020fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	ea42 0103 	orr.w	r1, r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	0c1a      	lsrs	r2, r3, #16
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f002 0204 	and.w	r2, r2, #4
 8004990:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499a:	d105      	bne.n	80049a8 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b292      	uxth	r2, r2
 80049a6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_SPI_TransmitReceive_IT+0x20>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e08a      	b.n	8004b06 <HAL_SPI_TransmitReceive_IT+0x136>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d00d      	beq.n	8004a28 <HAL_SPI_TransmitReceive_IT+0x58>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a12:	d106      	bne.n	8004a22 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <HAL_SPI_TransmitReceive_IT+0x52>
 8004a1c:	7dbb      	ldrb	r3, [r7, #22]
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
 8004a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a26:	e069      	b.n	8004afc <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a3e:	e05d      	b.n	8004afc <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d003      	beq.n	8004a54 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2205      	movs	r2, #5
 8004a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	887a      	ldrh	r2, [r7, #2]
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	887a      	ldrh	r2, [r7, #2]
 8004a7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <HAL_SPI_TransmitReceive_IT+0x140>)
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_SPI_TransmitReceive_IT+0x144>)
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
 8004a92:	e005      	b.n	8004aa0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a20      	ldr	r2, [pc, #128]	; (8004b18 <HAL_SPI_TransmitReceive_IT+0x148>)
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa8:	d10f      	bne.n	8004aca <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d008      	beq.n	8004afa <HAL_SPI_TransmitReceive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e000      	b.n	8004afc <HAL_SPI_TransmitReceive_IT+0x12c>
  }

error :
 8004afa:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	08004ea9 	.word	0x08004ea9
 8004b14:	08004f51 	.word	0x08004f51
 8004b18:	08004d61 	.word	0x08004d61
 8004b1c:	08004e1f 	.word	0x08004e1f

08004b20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10f      	bne.n	8004b64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
    return;
 8004b62:	e0be      	b.n	8004ce2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_SPI_IRQHandler+0x66>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
    return;
 8004b84:	e0ad      	b.n	8004ce2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_SPI_IRQHandler+0x80>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80a1 	beq.w	8004ce2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 809a 	beq.w	8004ce2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d023      	beq.n	8004c02 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d011      	beq.n	8004bea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	e00b      	b.n	8004c02 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]
        return;
 8004c00:	e06f      	b.n	8004ce2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d014      	beq.n	8004c38 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d04f      	beq.n	8004ce0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <HAL_SPI_IRQHandler+0x14c>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d034      	beq.n	8004cd6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0203 	bic.w	r2, r2, #3
 8004c7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_SPI_IRQHandler+0x1c8>)
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fe2d 	bl	80038f0 <HAL_DMA_Abort_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	4a0c      	ldr	r2, [pc, #48]	; (8004ce8 <HAL_SPI_IRQHandler+0x1c8>)
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fe17 	bl	80038f0 <HAL_DMA_Abort_IT>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cd4:	e003      	b.n	8004cde <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f81a 	bl	8004d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cdc:	e000      	b.n	8004ce0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004cde:	bf00      	nop
    return;
 8004ce0:	bf00      	nop
  }
}
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08004d39 	.word	0x08004d39

08004cec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ffdc 	bl	8004d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f103 020c 	add.w	r2, r3, #12
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d118      	bne.n	8004dce <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d103      	bne.n	8004dae <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <SPI_2linesRxISR_8BIT+0x74>)
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8004dac:	e00f      	b.n	8004dce <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dbc:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9ab 	bl	8005124 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	08004dd9 	.word	0x08004dd9

08004dd8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8004df4:	7afb      	ldrb	r3, [r7, #11]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e04:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <SPI_2linesRxISR_8BITCRC+0x3e>
  {
    SPI_CloseRxTx_ISR(hspi);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f987 	bl	8005124 <SPI_CloseRxTx_ISR>
  }
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d125      	bne.n	8004ea2 <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5e:	d110      	bne.n	8004e82 <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7e:	605a      	str	r2, [r3, #4]
      return;
 8004e80:	e00f      	b.n	8004ea2 <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f941 	bl	8005124 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d118      	bne.n	8004f12 <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee8:	d103      	bne.n	8004ef2 <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <SPI_2linesRxISR_16BIT+0x70>)
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8004ef0:	e00f      	b.n	8004f12 <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f00:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f909 	bl	8005124 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	08004f1d 	.word	0x08004f1d

08004f1c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8004f30:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f40:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8ee 	bl	8005124 <SPI_CloseRxTx_ISR>
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	1c9a      	adds	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d125      	bne.n	8004fd2 <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d110      	bne.n	8004fb2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f9e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fae:	605a      	str	r2, [r3, #4]
      return;
 8004fb0:	e00f      	b.n	8004fd2 <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8a9 	bl	8005124 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fe8:	f7fd fe60 	bl	8002cac <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ff8:	f7fd fe58 	bl	8002cac <HAL_GetTick>
 8004ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	0d1b      	lsrs	r3, r3, #20
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800500e:	e054      	b.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d050      	beq.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005018:	f7fd fe48 	bl	8002cac <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	429a      	cmp	r2, r3
 8005026:	d902      	bls.n	800502e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d13d      	bne.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800503c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005046:	d111      	bne.n	800506c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005050:	d004      	beq.n	800505c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505a:	d107      	bne.n	800506c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005074:	d10f      	bne.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e017      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d19b      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000010 	.word	0x20000010

080050e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff ff6a 	bl	8004fd8 <SPI_WaitFlagStateUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e000      	b.n	800511c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800512c:	4b4d      	ldr	r3, [pc, #308]	; (8005264 <SPI_CloseRxTx_ISR+0x140>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a4d      	ldr	r2, [pc, #308]	; (8005268 <SPI_CloseRxTx_ISR+0x144>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	2264      	movs	r2, #100	; 0x64
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005140:	f7fd fdb4 	bl	8002cac <HAL_GetTick>
 8005144:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0220 	bic.w	r2, r2, #32
 8005154:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005168:	e009      	b.n	800517e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3b01      	subs	r3, #1
 800516e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0eb      	beq.n	8005156 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ffb0 	bl	80050e8 <SPI_EndRxTxTransaction>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d129      	bne.n	800521a <SPI_CloseRxTx_ISR+0xf6>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f850 	bl	800526c <SPI_ISCRCErrorValid>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d11d      	bne.n	800520e <SPI_CloseRxTx_ISR+0xea>
    {
      hspi->State = HAL_SPI_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0202 	orr.w	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005204:	601a      	str	r2, [r3, #0]

      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fd82 	bl	8004d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800520c:	e026      	b.n	800525c <SPI_CloseRxTx_ISR+0x138>
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005216:	609a      	str	r2, [r3, #8]
}
 8005218:	e020      	b.n	800525c <SPI_CloseRxTx_ISR+0x138>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <SPI_CloseRxTx_ISR+0x12a>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b04      	cmp	r3, #4
 800522c:	d107      	bne.n	800523e <SPI_CloseRxTx_ISR+0x11a>
        hspi->State = HAL_SPI_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fd58 	bl	8004cec <HAL_SPI_RxCpltCallback>
}
 800523c:	e00e      	b.n	800525c <SPI_CloseRxTx_ISR+0x138>
        hspi->State = HAL_SPI_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fd59 	bl	8004cfe <HAL_SPI_TxRxCpltCallback>
}
 800524c:	e006      	b.n	800525c <SPI_CloseRxTx_ISR+0x138>
      hspi->State = HAL_SPI_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fd5a 	bl	8004d10 <HAL_SPI_ErrorCallback>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000010 	.word	0x20000010
 8005268:	057619f1 	.word	0x057619f1

0800526c <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  }
#endif
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8005274:	2301      	movs	r3, #1
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e041      	b.n	8005316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fd fc2a 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fe7c 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e03a      	b.n	80053ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_Base_Start_IT+0x98>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d009      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_TIM_Base_Start_IT+0x9c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x58>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d111      	bne.n	800539c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d010      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e007      	b.n	80053ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800

080053c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <HAL_TIM_Base_Stop_IT+0x48>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	f240 4344 	movw	r3, #1092	; 0x444
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <HAL_TIM_Base_Stop_IT+0x48>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e041      	b.n	80054b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fd fb34 	bl	8002ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 fdac 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_TIM_PWM_Start_IT+0x24>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e022      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6a>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d109      	bne.n	80054fe <HAL_TIM_PWM_Start_IT+0x3e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e015      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6a>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d109      	bne.n	8005518 <HAL_TIM_PWM_Start_IT+0x58>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e008      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0a4      	b.n	800567c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start_IT+0x82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	e013      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xaa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start_IT+0x92>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005550:	e00b      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xaa>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start_IT+0xa2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005560:	e003      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d841      	bhi.n	80055f4 <HAL_TIM_PWM_Start_IT+0x134>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <HAL_TIM_PWM_Start_IT+0xb8>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055f5 	.word	0x080055f5
 8005580:	080055f5 	.word	0x080055f5
 8005584:	080055f5 	.word	0x080055f5
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055f5 	.word	0x080055f5
 8005590:	080055f5 	.word	0x080055f5
 8005594:	080055f5 	.word	0x080055f5
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055e3 	.word	0x080055e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0202 	orr.w	r2, r2, #2
 80055ba:	60da      	str	r2, [r3, #12]
      break;
 80055bc:	e01b      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0204 	orr.w	r2, r2, #4
 80055cc:	60da      	str	r2, [r3, #12]
      break;
 80055ce:	e012      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	60da      	str	r2, [r3, #12]
      break;
 80055e0:	e009      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0210 	orr.w	r2, r2, #16
 80055f0:	60da      	str	r2, [r3, #12]
      break;
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80055f4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2201      	movs	r2, #1
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 ff5c 	bl	80064bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d107      	bne.n	800561e <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a18      	ldr	r2, [pc, #96]	; (8005684 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIM_PWM_Start_IT+0x186>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d009      	beq.n	8005646 <HAL_TIM_PWM_Start_IT+0x186>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIM_PWM_Start_IT+0x186>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d111      	bne.n	800566a <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d010      	beq.n	800567a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	e007      	b.n	800567a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0201 	orr.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800

08005690 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e093      	b.n	80057cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fd f953 	bl	8002964 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d4:	f023 0307 	bic.w	r3, r3, #7
 80056d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 fc69 	bl	8005fbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	4313      	orrs	r3, r2
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005730:	f023 030c 	bic.w	r3, r3, #12
 8005734:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800573c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	4313      	orrs	r3, r2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	011a      	lsls	r2, r3, #4
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	031b      	lsls	r3, r3, #12
 8005760:	4313      	orrs	r3, r2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	4313      	orrs	r3, r2
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d110      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d102      	bne.n	8005810 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800580a:	7b7b      	ldrb	r3, [r7, #13]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e069      	b.n	80058e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005824:	e031      	b.n	800588a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d110      	bne.n	800584e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d102      	bne.n	8005838 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005832:	7b3b      	ldrb	r3, [r7, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d001      	beq.n	800583c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e055      	b.n	80058e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800584c:	e01d      	b.n	800588a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d108      	bne.n	8005866 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d105      	bne.n	8005866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585a:	7b7b      	ldrb	r3, [r7, #13]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d102      	bne.n	8005866 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005860:	7b3b      	ldrb	r3, [r7, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d001      	beq.n	800586a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03e      	b.n	80058e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_TIM_Encoder_Start+0xc4>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d008      	beq.n	80058a8 <HAL_TIM_Encoder_Start+0xd4>
 8005896:	e00f      	b.n	80058b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2201      	movs	r2, #1
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fe0b 	bl	80064bc <TIM_CCxChannelCmd>
      break;
 80058a6:	e016      	b.n	80058d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	2104      	movs	r1, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fe03 	bl	80064bc <TIM_CCxChannelCmd>
      break;
 80058b6:	e00e      	b.n	80058d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fdfb 	bl	80064bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	2104      	movs	r1, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fdf4 	bl	80064bc <TIM_CCxChannelCmd>
      break;
 80058d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005900:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005908:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005910:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005918:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005926:	7b7b      	ldrb	r3, [r7, #13]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e089      	b.n	8005a44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	e031      	b.n	80059a6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b04      	cmp	r3, #4
 8005946:	d110      	bne.n	800596a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d102      	bne.n	8005954 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800594e:	7b3b      	ldrb	r3, [r7, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e075      	b.n	8005a44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005968:	e01d      	b.n	80059a6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005976:	7b7b      	ldrb	r3, [r7, #13]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800597c:	7b3b      	ldrb	r3, [r7, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e05e      	b.n	8005a44 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80059b2:	e01f      	b.n	80059f4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fd7d 	bl	80064bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0202 	orr.w	r2, r2, #2
 80059d0:	60da      	str	r2, [r3, #12]
      break;
 80059d2:	e02e      	b.n	8005a32 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2201      	movs	r2, #1
 80059da:	2104      	movs	r1, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fd6d 	bl	80064bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0204 	orr.w	r2, r2, #4
 80059f0:	60da      	str	r2, [r3, #12]
      break;
 80059f2:	e01e      	b.n	8005a32 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fd5d 	bl	80064bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	2104      	movs	r1, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fd56 	bl	80064bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0202 	orr.w	r2, r2, #2
 8005a1e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0204 	orr.w	r2, r2, #4
 8005a2e:	60da      	str	r2, [r3, #12]
      break;
 8005a30:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d122      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d11b      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0202 	mvn.w	r2, #2
 8005a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa78 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa6b 	bl	8005f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa7a 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d122      	bne.n	8005afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d11b      	bne.n	8005afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0204 	mvn.w	r2, #4
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa4e 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa41 	bl	8005f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fa50 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0208 	mvn.w	r2, #8
 8005b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2204      	movs	r2, #4
 8005b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa24 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa17 	bl	8005f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa26 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d122      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0210 	mvn.w	r2, #16
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9fa 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e005      	b.n	8005b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f9ed 	bl	8005f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f9fc 	bl	8005f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0201 	mvn.w	r2, #1
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9c8 	bl	8005f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d10e      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d107      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fceb 	bl	80065d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d107      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9c0 	bl	8005fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0220 	mvn.w	r2, #32
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fcb6 	bl	80065c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e0ac      	b.n	8005dd0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	f200 809f 	bhi.w	8005dc4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005dc5 	.word	0x08005dc5
 8005c94:	08005dc5 	.word	0x08005dc5
 8005c98:	08005dc5 	.word	0x08005dc5
 8005c9c:	08005d01 	.word	0x08005d01
 8005ca0:	08005dc5 	.word	0x08005dc5
 8005ca4:	08005dc5 	.word	0x08005dc5
 8005ca8:	08005dc5 	.word	0x08005dc5
 8005cac:	08005d43 	.word	0x08005d43
 8005cb0:	08005dc5 	.word	0x08005dc5
 8005cb4:	08005dc5 	.word	0x08005dc5
 8005cb8:	08005dc5 	.word	0x08005dc5
 8005cbc:	08005d83 	.word	0x08005d83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f9da 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0208 	orr.w	r2, r2, #8
 8005cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6999      	ldr	r1, [r3, #24]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	619a      	str	r2, [r3, #24]
      break;
 8005cfe:	e062      	b.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fa20 	bl	800614c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6999      	ldr	r1, [r3, #24]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	619a      	str	r2, [r3, #24]
      break;
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fa69 	bl	8006220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0204 	bic.w	r2, r2, #4
 8005d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69d9      	ldr	r1, [r3, #28]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	61da      	str	r2, [r3, #28]
      break;
 8005d80:	e021      	b.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fab3 	bl	80062f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69d9      	ldr	r1, [r3, #28]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	021a      	lsls	r2, r3, #8
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	61da      	str	r2, [r3, #28]
      break;
 8005dc2:	e000      	b.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIM_ConfigClockSource+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e0b3      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x180>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e28:	d03e      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0xd0>
 8005e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2e:	f200 8087 	bhi.w	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	f000 8085 	beq.w	8005f44 <HAL_TIM_ConfigClockSource+0x16c>
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d87f      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e40:	2b70      	cmp	r3, #112	; 0x70
 8005e42:	d01a      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0xa2>
 8005e44:	2b70      	cmp	r3, #112	; 0x70
 8005e46:	d87b      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e48:	2b60      	cmp	r3, #96	; 0x60
 8005e4a:	d050      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x116>
 8005e4c:	2b60      	cmp	r3, #96	; 0x60
 8005e4e:	d877      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e50:	2b50      	cmp	r3, #80	; 0x50
 8005e52:	d03c      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0xf6>
 8005e54:	2b50      	cmp	r3, #80	; 0x50
 8005e56:	d873      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d058      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x136>
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d86f      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e60:	2b30      	cmp	r3, #48	; 0x30
 8005e62:	d064      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x156>
 8005e64:	2b30      	cmp	r3, #48	; 0x30
 8005e66:	d86b      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d060      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x156>
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d867      	bhi.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05c      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x156>
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d05a      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e78:	e062      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6899      	ldr	r1, [r3, #8]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f000 faf8 	bl	800647e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	609a      	str	r2, [r3, #8]
      break;
 8005ea6:	e04e      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6899      	ldr	r1, [r3, #8]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f000 fae1 	bl	800647e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eca:	609a      	str	r2, [r3, #8]
      break;
 8005ecc:	e03b      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6859      	ldr	r1, [r3, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	461a      	mov	r2, r3
 8005edc:	f000 fa58 	bl	8006390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2150      	movs	r1, #80	; 0x50
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 faaf 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005eec:	e02b      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 fa76 	bl	80063ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2160      	movs	r1, #96	; 0x60
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fa9f 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e01b      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 fa38 	bl	8006390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa8f 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e00b      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f000 fa86 	bl	800644a <TIM_ITRx_SetConfig>
        break;
 8005f3e:	e002      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr

08005f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr

08005f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
	...

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a29      	ldr	r2, [pc, #164]	; (8006074 <TIM_Base_SetConfig+0xb8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <TIM_Base_SetConfig+0x30>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d007      	beq.n	8005fec <TIM_Base_SetConfig+0x30>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a26      	ldr	r2, [pc, #152]	; (8006078 <TIM_Base_SetConfig+0xbc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0x30>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a25      	ldr	r2, [pc, #148]	; (800607c <TIM_Base_SetConfig+0xc0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <TIM_Base_SetConfig+0xb8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_Base_SetConfig+0x62>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d007      	beq.n	800601e <TIM_Base_SetConfig+0x62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <TIM_Base_SetConfig+0xbc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_Base_SetConfig+0x62>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <TIM_Base_SetConfig+0xc0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <TIM_Base_SetConfig+0xb8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d103      	bne.n	8006064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	615a      	str	r2, [r3, #20]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <TIM_OC1_SetConfig+0xc8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00

0800614c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0320 	bic.w	r3, r3, #32
 8006196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC2_SetConfig+0xd0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d10d      	bne.n	80061c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC2_SetConfig+0xd0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d113      	bne.n	80061f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	40012c00 	.word	0x40012c00

08006220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <TIM_OC3_SetConfig+0xd0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10d      	bne.n	800629a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC3_SetConfig+0xd0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d113      	bne.n	80062ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00

080062f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800633e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <TIM_OC4_SetConfig+0x98>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d109      	bne.n	8006368 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00

08006390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f023 0201 	bic.w	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 030a 	bic.w	r3, r3, #10
 80063cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0210 	bic.w	r2, r3, #16
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	031b      	lsls	r3, r3, #12
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	f043 0307 	orr.w	r3, r3, #7
 800646c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	609a      	str	r2, [r3, #8]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006498:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	021a      	lsls	r2, r3, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	609a      	str	r2, [r3, #8]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2201      	movs	r2, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	43db      	mvns	r3, r3
 80064de:	401a      	ands	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006518:	2302      	movs	r3, #2
 800651a:	e046      	b.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006568:	d009      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a10      	ldr	r2, [pc, #64]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10c      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800

080065c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <__libc_init_array>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	2600      	movs	r6, #0
 80065e8:	4d0c      	ldr	r5, [pc, #48]	; (800661c <__libc_init_array+0x38>)
 80065ea:	4c0d      	ldr	r4, [pc, #52]	; (8006620 <__libc_init_array+0x3c>)
 80065ec:	1b64      	subs	r4, r4, r5
 80065ee:	10a4      	asrs	r4, r4, #2
 80065f0:	42a6      	cmp	r6, r4
 80065f2:	d109      	bne.n	8006608 <__libc_init_array+0x24>
 80065f4:	f000 f822 	bl	800663c <_init>
 80065f8:	2600      	movs	r6, #0
 80065fa:	4d0a      	ldr	r5, [pc, #40]	; (8006624 <__libc_init_array+0x40>)
 80065fc:	4c0a      	ldr	r4, [pc, #40]	; (8006628 <__libc_init_array+0x44>)
 80065fe:	1b64      	subs	r4, r4, r5
 8006600:	10a4      	asrs	r4, r4, #2
 8006602:	42a6      	cmp	r6, r4
 8006604:	d105      	bne.n	8006612 <__libc_init_array+0x2e>
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	f855 3b04 	ldr.w	r3, [r5], #4
 800660c:	4798      	blx	r3
 800660e:	3601      	adds	r6, #1
 8006610:	e7ee      	b.n	80065f0 <__libc_init_array+0xc>
 8006612:	f855 3b04 	ldr.w	r3, [r5], #4
 8006616:	4798      	blx	r3
 8006618:	3601      	adds	r6, #1
 800661a:	e7f2      	b.n	8006602 <__libc_init_array+0x1e>
 800661c:	08006674 	.word	0x08006674
 8006620:	08006674 	.word	0x08006674
 8006624:	08006674 	.word	0x08006674
 8006628:	08006678 	.word	0x08006678

0800662c <memset>:
 800662c:	4603      	mov	r3, r0
 800662e:	4402      	add	r2, r0
 8006630:	4293      	cmp	r3, r2
 8006632:	d100      	bne.n	8006636 <memset+0xa>
 8006634:	4770      	bx	lr
 8006636:	f803 1b01 	strb.w	r1, [r3], #1
 800663a:	e7f9      	b.n	8006630 <memset+0x4>

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
